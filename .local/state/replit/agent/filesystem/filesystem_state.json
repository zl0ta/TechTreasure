{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Overview\n\nThis is a complete e-commerce web application built with React + TypeScript frontend and Node.js + Express backend. The application features a modern shopping experience with product browsing, cart management, user authentication, order processing, and a blog section. It uses a file-based data storage system with JSON files and implements a full REST API architecture.\n\n# User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n# System Architecture\n\n## Frontend Architecture\nThe frontend uses **React 18** with **TypeScript** and **Vite** as the build tool. The architecture follows a modern component-based approach:\n\n- **UI Framework**: Built with shadcn/ui components and Radix UI primitives for accessibility\n- **Styling**: Tailwind CSS with custom design tokens and CSS variables\n- **State Management**: TanStack Query (React Query) for server state management and caching\n- **Routing**: Wouter for lightweight client-side routing\n- **Form Handling**: React Hook Form with Zod validation\n- **Authentication**: Session-based auth with custom hooks\n\nThe frontend is organized into logical directories:\n- `/pages` - Route components for different application views\n- `/components` - Reusable UI components organized by feature\n- `/hooks` - Custom React hooks for business logic\n- `/lib` - Utility functions and configurations\n\n## Backend Architecture\nThe backend uses **Express.js** with **TypeScript** in a REST API pattern:\n\n- **API Structure**: RESTful endpoints for products, users, cart, orders, blog, and authentication\n- **Session Management**: Express sessions with in-memory storage for user authentication\n- **Password Security**: bcrypt for password hashing\n- **Data Storage**: File-based JSON storage with a custom storage abstraction layer\n- **Validation**: Shared Zod schemas between frontend and backend\n- **Development Setup**: Vite integration for hot reloading in development\n\nKey architectural decisions:\n- Monorepo structure with shared schemas in `/shared` directory\n- Custom storage interface that can be easily swapped for a database later\n- Session-based authentication instead of JWT for simplicity\n- Separation of concerns with dedicated route handlers and storage layer\n\n## Data Storage\nThe application uses **file-based JSON storage** as a database simulation:\n\n- **Products**: Complete product catalog with categories, images, and inventory\n- **Users**: User accounts with hashed passwords and optional address information  \n- **Orders**: Order history with items, pricing, and status tracking\n- **Blog**: Content management for blog posts with categories and metadata\n- **Cart**: In-memory cart storage per user session\n\nThe storage layer is abstracted through an interface that supports easy migration to a proper database like PostgreSQL (Drizzle ORM is already configured for future use).\n\n## External Dependencies\n\n- **Database**: Configured for Neon PostgreSQL with Drizzle ORM (currently unused, falls back to JSON files)\n- **UI Components**: Radix UI primitives for accessible components\n- **Icons**: Lucide React for consistent iconography\n- **Image Hosting**: Unsplash for product and blog images\n- **Development Tools**: \n  - Replit integration for development environment\n  - Vite plugins for enhanced development experience\n  - TypeScript for type safety across the entire stack\n\nThe application is designed to be deployment-ready with environment-based configuration and can easily scale from the current file-based storage to a full database system.","size_bytes":3531},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2766},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"â€¦\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport session from \"express-session\";\nimport { storage } from \"./storage\";\nimport { insertUserSchema, loginSchema, insertOrderSchema, cartItemSchema, insertProductSchema } from \"@shared/schema\";\nimport bcrypt from \"bcrypt\";\n\ndeclare module 'express-session' {\n  interface SessionData {\n    userId?: string;\n  }\n}\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Session middleware\n  app.use(session({\n    secret: process.env.SESSION_SECRET || 'your-secret-key',\n    resave: false,\n    saveUninitialized: false,\n    cookie: { secure: false, maxAge: 24 * 60 * 60 * 1000 } // 24 hours\n  }));\n\n  // Auth middleware\n  const requireAuth = (req: any, res: any, next: any) => {\n    if (!req.session.userId) {\n      return res.status(401).json({ message: 'Authentication required' });\n    }\n    next();\n  };\n\n  // Auth routes\n  app.post('/api/auth/register', async (req, res) => {\n    try {\n      const userData = insertUserSchema.parse(req.body);\n      \n      // Check if user already exists\n      const existingUser = await storage.getUserByEmail(userData.email);\n      if (existingUser) {\n        return res.status(400).json({ message: 'User already exists with this email' });\n      }\n      \n      const user = await storage.createUser(userData);\n      req.session.userId = user.id;\n      \n      // Don't send password back\n      const { password, ...userWithoutPassword } = user;\n      res.json({ user: userWithoutPassword });\n    } catch (error: any) {\n      res.status(400).json({ message: error.message || 'Registration failed' });\n    }\n  });\n\n  app.post('/api/auth/login', async (req, res) => {\n    try {\n      const { email, password } = loginSchema.parse(req.body);\n      \n      const user = await storage.getUserByEmail(email);\n      if (!user) {\n        return res.status(401).json({ message: 'Invalid credentials' });\n      }\n      \n      const isValidPassword = await bcrypt.compare(password, user.password);\n      if (!isValidPassword) {\n        return res.status(401).json({ message: 'Invalid credentials' });\n      }\n      \n      req.session.userId = user.id;\n      const { password: _, ...userWithoutPassword } = user;\n      res.json({ user: userWithoutPassword });\n    } catch (error: any) {\n      res.status(400).json({ message: error.message || 'Login failed' });\n    }\n  });\n\n  app.post('/api/auth/logout', (req, res) => {\n    req.session.destroy((err) => {\n      if (err) {\n        return res.status(500).json({ message: 'Logout failed' });\n      }\n      res.json({ message: 'Logged out successfully' });\n    });\n  });\n\n  app.get('/api/auth/me', async (req, res) => {\n    if (!req.session.userId) {\n      return res.status(401).json({ message: 'Not authenticated' });\n    }\n    \n    const user = await storage.getUser(req.session.userId);\n    if (!user) {\n      return res.status(404).json({ message: 'User not found' });\n    }\n    \n    const { password, ...userWithoutPassword } = user;\n    res.json({ user: userWithoutPassword });\n  });\n\n  // Product routes\n  app.get('/api/products', async (req, res) => {\n    try {\n      const { \n        category, \n        search, \n        page = '1', \n        limit = '12',\n        sort,\n        minPrice,\n        maxPrice,\n        brands\n      } = req.query;\n      \n      const filters = {\n        category: category as string,\n        search: search as string,\n        page: parseInt(page as string),\n        limit: parseInt(limit as string),\n        sort: sort as string,\n        minPrice: minPrice ? parseFloat(minPrice as string) : undefined,\n        maxPrice: maxPrice ? parseFloat(maxPrice as string) : undefined,\n        brands: brands ? (brands as string).split(',') : undefined,\n      };\n      \n      const result = await storage.getProducts(filters);\n      res.json(result);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  app.get('/api/products/:id', async (req, res) => {\n    try {\n      const product = await storage.getProduct(req.params.id);\n      if (!product) {\n        return res.status(404).json({ message: 'Product not found' });\n      }\n      res.json(product);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  // Admin product routes (basic implementation)\n  app.post('/api/admin/products', requireAuth, async (req, res) => {\n    try {\n      const productData = insertProductSchema.parse(req.body);\n      const product = await storage.createProduct(productData);\n      res.status(201).json(product);\n    } catch (error: any) {\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  app.put('/api/admin/products/:id', requireAuth, async (req, res) => {\n    try {\n      const productData = insertProductSchema.partial().parse(req.body);\n      const product = await storage.updateProduct(req.params.id, productData);\n      if (!product) {\n        return res.status(404).json({ message: 'Product not found' });\n      }\n      res.json(product);\n    } catch (error: any) {\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  app.delete('/api/admin/products/:id', requireAuth, async (req, res) => {\n    try {\n      const deleted = await storage.deleteProduct(req.params.id);\n      if (!deleted) {\n        return res.status(404).json({ message: 'Product not found' });\n      }\n      res.json({ message: 'Product deleted successfully' });\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  // Cart routes\n  app.get('/api/cart', requireAuth, async (req, res) => {\n    try {\n      const cartItems = await storage.getCart(req.session.userId!);\n      \n      // Get product details for each cart item\n      const cartWithProducts = await Promise.all(\n        cartItems.map(async (item) => {\n          const product = await storage.getProduct(item.productId);\n          return {\n            ...item,\n            product,\n          };\n        })\n      );\n      \n      res.json(cartWithProducts);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  app.post('/api/cart', requireAuth, async (req, res) => {\n    try {\n      const cartItem = cartItemSchema.parse(req.body);\n      await storage.addToCart(req.session.userId!, cartItem);\n      res.json({ message: 'Item added to cart' });\n    } catch (error: any) {\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  app.put('/api/cart/:productId', requireAuth, async (req, res) => {\n    try {\n      const { quantity } = req.body;\n      await storage.updateCartItem(req.session.userId!, req.params.productId, quantity);\n      res.json({ message: 'Cart updated' });\n    } catch (error: any) {\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  app.delete('/api/cart/:productId', requireAuth, async (req, res) => {\n    try {\n      await storage.removeFromCart(req.session.userId!, req.params.productId);\n      res.json({ message: 'Item removed from cart' });\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  // Checkout route\n  app.post('/api/checkout', requireAuth, async (req, res) => {\n    try {\n      const orderData = insertOrderSchema.parse(req.body);\n      \n      // Validate cart has items\n      const cartItems = await storage.getCart(req.session.userId!);\n      if (cartItems.length === 0) {\n        return res.status(400).json({ message: 'Cart is empty' });\n      }\n      \n      // Create order\n      const order = await storage.createOrder({\n        ...orderData,\n        userId: req.session.userId!,\n      });\n      \n      // Clear cart after successful order\n      await storage.clearCart(req.session.userId!);\n      \n      res.status(201).json(order);\n    } catch (error: any) {\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  // Order routes\n  app.get('/api/orders', requireAuth, async (req, res) => {\n    try {\n      const orders = await storage.getOrdersByUserId(req.session.userId!);\n      res.json(orders);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  app.get('/api/orders/:id', requireAuth, async (req, res) => {\n    try {\n      const order = await storage.getOrder(req.params.id);\n      if (!order || order.userId !== req.session.userId!) {\n        return res.status(404).json({ message: 'Order not found' });\n      }\n      res.json(order);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  // Blog routes\n  app.get('/api/blog', async (req, res) => {\n    try {\n      const { page = '1', limit = '10', search } = req.query;\n      const result = await storage.getBlogPosts(\n        parseInt(page as string),\n        parseInt(limit as string),\n        search as string\n      );\n      res.json(result);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  app.get('/api/blog/:id', async (req, res) => {\n    try {\n      const post = await storage.getBlogPost(req.params.id);\n      if (!post) {\n        return res.status(404).json({ message: 'Blog post not found' });\n      }\n      res.json(post);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":9380},"server/storage.ts":{"content":"import { type User, type InsertUser, type Product, type InsertProduct, type Order, type InsertOrder, type BlogPost, type InsertBlogPost, type CartItem } from \"@shared/schema\";\nimport { randomUUID } from \"crypto\";\nimport { promises as fs } from \"fs\";\nimport path from \"path\";\nimport bcrypt from \"bcrypt\";\n\n// Storage interface\nexport interface IStorage {\n  // Users\n  getUser(id: string): Promise<User | undefined>;\n  getUserByEmail(email: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  updateUser(id: string, user: Partial<InsertUser>): Promise<User | undefined>;\n  \n  // Products\n  getProducts(filters?: { category?: string; search?: string; page?: number; limit?: number; sort?: string; minPrice?: number; maxPrice?: number; brands?: string[] }): Promise<{ products: Product[]; total: number }>;\n  getProduct(id: string): Promise<Product | undefined>;\n  createProduct(product: InsertProduct): Promise<Product>;\n  updateProduct(id: string, product: Partial<InsertProduct>): Promise<Product | undefined>;\n  deleteProduct(id: string): Promise<boolean>;\n  \n  // Orders\n  getOrdersByUserId(userId: string): Promise<Order[]>;\n  getOrder(id: string): Promise<Order | undefined>;\n  createOrder(order: InsertOrder): Promise<Order>;\n  updateOrder(id: string, order: Partial<InsertOrder>): Promise<Order | undefined>;\n  \n  // Cart\n  getCart(userId: string): Promise<CartItem[]>;\n  addToCart(userId: string, item: CartItem): Promise<void>;\n  updateCartItem(userId: string, productId: string, quantity: number): Promise<void>;\n  removeFromCart(userId: string, productId: string): Promise<void>;\n  clearCart(userId: string): Promise<void>;\n  \n  // Blog\n  getBlogPosts(page?: number, limit?: number, search?: string): Promise<{ posts: BlogPost[]; total: number }>;\n  getBlogPost(id: string): Promise<BlogPost | undefined>;\n  createBlogPost(post: InsertBlogPost): Promise<BlogPost>;\n}\n\nexport class FileStorage implements IStorage {\n  private dataDir = path.join(process.cwd(), 'data');\n  private cart: Map<string, CartItem[]> = new Map();\n\n  constructor() {\n    this.ensureDataDir();\n  }\n\n  private async ensureDataDir() {\n    try {\n      await fs.mkdir(this.dataDir, { recursive: true });\n    } catch (error) {\n      // Directory might already exist\n    }\n  }\n\n  private async readJsonFile<T>(filename: string, defaultValue: T[]): Promise<T[]> {\n    try {\n      const filePath = path.join(this.dataDir, filename);\n      const data = await fs.readFile(filePath, 'utf-8');\n      return JSON.parse(data, (key, value) => {\n        // Parse dates\n        if (key.endsWith('At') && typeof value === 'string') {\n          return new Date(value);\n        }\n        return value;\n      });\n    } catch (error) {\n      return defaultValue;\n    }\n  }\n\n  private async writeJsonFile<T>(filename: string, data: T[]): Promise<void> {\n    const filePath = path.join(this.dataDir, filename);\n    await fs.writeFile(filePath, JSON.stringify(data, null, 2));\n  }\n\n  // Users\n  async getUser(id: string): Promise<User | undefined> {\n    const users = await this.readJsonFile<User>('users.json', []);\n    return users.find(user => user.id === id);\n  }\n\n  async getUserByEmail(email: string): Promise<User | undefined> {\n    const users = await this.readJsonFile<User>('users.json', []);\n    return users.find(user => user.email === email);\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const users = await this.readJsonFile<User>('users.json', []);\n    const hashedPassword = await bcrypt.hash(insertUser.password, 10);\n    \n    const user: User = {\n      ...insertUser,\n      id: randomUUID(),\n      password: hashedPassword,\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    };\n    \n    users.push(user);\n    await this.writeJsonFile('users.json', users);\n    return user;\n  }\n\n  async updateUser(id: string, updateData: Partial<InsertUser>): Promise<User | undefined> {\n    const users = await this.readJsonFile<User>('users.json', []);\n    const index = users.findIndex(user => user.id === id);\n    \n    if (index === -1) return undefined;\n    \n    if (updateData.password) {\n      updateData.password = await bcrypt.hash(updateData.password, 10);\n    }\n    \n    users[index] = {\n      ...users[index],\n      ...updateData,\n      updatedAt: new Date(),\n    };\n    \n    await this.writeJsonFile('users.json', users);\n    return users[index];\n  }\n\n  // Products\n  async getProducts(filters?: { category?: string; search?: string; page?: number; limit?: number; sort?: string; minPrice?: number; maxPrice?: number; brands?: string[] }): Promise<{ products: Product[]; total: number }> {\n    const products = await this.readJsonFile<Product>('products.json', []);\n    let filteredProducts = products;\n\n    // Filter by category\n    if (filters?.category) {\n      filteredProducts = filteredProducts.filter(p => p.category.toLowerCase() === filters.category!.toLowerCase());\n    }\n\n    // Filter by search term\n    if (filters?.search) {\n      const searchTerm = filters.search.toLowerCase();\n      filteredProducts = filteredProducts.filter(p => \n        p.name.toLowerCase().includes(searchTerm) || \n        p.description.toLowerCase().includes(searchTerm) ||\n        p.tags.some(tag => tag.toLowerCase().includes(searchTerm))\n      );\n    }\n\n    // Filter by price range\n    if (filters?.minPrice !== undefined) {\n      filteredProducts = filteredProducts.filter(p => p.price >= filters.minPrice!);\n    }\n    if (filters?.maxPrice !== undefined) {\n      filteredProducts = filteredProducts.filter(p => p.price <= filters.maxPrice!);\n    }\n\n    // Filter by brands\n    if (filters?.brands && filters.brands.length > 0) {\n      filteredProducts = filteredProducts.filter(p => \n        filters.brands!.some(brand => p.brand?.toLowerCase() === brand.toLowerCase())\n      );\n    }\n\n    // Sort products\n    if (filters?.sort) {\n      switch (filters.sort) {\n        case 'price-low':\n          filteredProducts.sort((a, b) => a.price - b.price);\n          break;\n        case 'price-high':\n          filteredProducts.sort((a, b) => b.price - a.price);\n          break;\n        case 'name':\n        default:\n          filteredProducts.sort((a, b) => a.name.localeCompare(b.name));\n          break;\n      }\n    }\n\n    const total = filteredProducts.length;\n    \n    // Apply pagination\n    if (filters?.page && filters?.limit) {\n      const start = (filters.page - 1) * filters.limit;\n      filteredProducts = filteredProducts.slice(start, start + filters.limit);\n    }\n\n    return { products: filteredProducts, total };\n  }\n\n  async getProduct(id: string): Promise<Product | undefined> {\n    const products = await this.readJsonFile<Product>('products.json', []);\n    return products.find(product => product.id === id);\n  }\n\n  async createProduct(insertProduct: InsertProduct): Promise<Product> {\n    const products = await this.readJsonFile<Product>('products.json', []);\n    \n    const product: Product = {\n      ...insertProduct,\n      id: randomUUID(),\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    };\n    \n    products.push(product);\n    await this.writeJsonFile('products.json', products);\n    return product;\n  }\n\n  async updateProduct(id: string, updateData: Partial<InsertProduct>): Promise<Product | undefined> {\n    const products = await this.readJsonFile<Product>('products.json', []);\n    const index = products.findIndex(product => product.id === id);\n    \n    if (index === -1) return undefined;\n    \n    products[index] = {\n      ...products[index],\n      ...updateData,\n      updatedAt: new Date(),\n    };\n    \n    await this.writeJsonFile('products.json', products);\n    return products[index];\n  }\n\n  async deleteProduct(id: string): Promise<boolean> {\n    const products = await this.readJsonFile<Product>('products.json', []);\n    const index = products.findIndex(product => product.id === id);\n    \n    if (index === -1) return false;\n    \n    products.splice(index, 1);\n    await this.writeJsonFile('products.json', products);\n    return true;\n  }\n\n  // Orders\n  async getOrdersByUserId(userId: string): Promise<Order[]> {\n    const orders = await this.readJsonFile<Order>('orders.json', []);\n    return orders.filter(order => order.userId === userId);\n  }\n\n  async getOrder(id: string): Promise<Order | undefined> {\n    const orders = await this.readJsonFile<Order>('orders.json', []);\n    return orders.find(order => order.id === id);\n  }\n\n  async createOrder(insertOrder: InsertOrder): Promise<Order> {\n    const orders = await this.readJsonFile<Order>('orders.json', []);\n    \n    const order: Order = {\n      ...insertOrder,\n      id: randomUUID(),\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    };\n    \n    orders.push(order);\n    await this.writeJsonFile('orders.json', orders);\n    return order;\n  }\n\n  async updateOrder(id: string, updateData: Partial<InsertOrder>): Promise<Order | undefined> {\n    const orders = await this.readJsonFile<Order>('orders.json', []);\n    const index = orders.findIndex(order => order.id === id);\n    \n    if (index === -1) return undefined;\n    \n    orders[index] = {\n      ...orders[index],\n      ...updateData,\n      updatedAt: new Date(),\n    };\n    \n    await this.writeJsonFile('orders.json', orders);\n    return orders[index];\n  }\n\n  // Cart (in-memory with session persistence)\n  async getCart(userId: string): Promise<CartItem[]> {\n    return this.cart.get(userId) || [];\n  }\n\n  async addToCart(userId: string, item: CartItem): Promise<void> {\n    const userCart = this.cart.get(userId) || [];\n    const existingIndex = userCart.findIndex(cartItem => cartItem.productId === item.productId);\n    \n    if (existingIndex >= 0) {\n      userCart[existingIndex].quantity += item.quantity;\n    } else {\n      userCart.push(item);\n    }\n    \n    this.cart.set(userId, userCart);\n  }\n\n  async updateCartItem(userId: string, productId: string, quantity: number): Promise<void> {\n    const userCart = this.cart.get(userId) || [];\n    const index = userCart.findIndex(item => item.productId === productId);\n    \n    if (index >= 0) {\n      if (quantity <= 0) {\n        userCart.splice(index, 1);\n      } else {\n        userCart[index].quantity = quantity;\n      }\n      this.cart.set(userId, userCart);\n    }\n  }\n\n  async removeFromCart(userId: string, productId: string): Promise<void> {\n    const userCart = this.cart.get(userId) || [];\n    const filteredCart = userCart.filter(item => item.productId !== productId);\n    this.cart.set(userId, filteredCart);\n  }\n\n  async clearCart(userId: string): Promise<void> {\n    this.cart.delete(userId);\n  }\n\n  // Blog\n  async getBlogPosts(page?: number, limit?: number, search?: string): Promise<{ posts: BlogPost[]; total: number }> {\n    const posts = await this.readJsonFile<BlogPost>('blog.json', []);\n    let filteredPosts = posts;\n    \n    // Filter by search term\n    if (search) {\n      const searchTerm = search.toLowerCase();\n      filteredPosts = filteredPosts.filter(p => \n        p.title.toLowerCase().includes(searchTerm) || \n        p.content.toLowerCase().includes(searchTerm) ||\n        p.excerpt?.toLowerCase().includes(searchTerm)\n      );\n    }\n    \n    const total = filteredPosts.length;\n    \n    // Apply pagination\n    if (page && limit) {\n      const start = (page - 1) * limit;\n      filteredPosts = filteredPosts.slice(start, start + limit);\n    }\n    \n    return { posts: filteredPosts, total };\n  }\n\n  async getBlogPost(id: string): Promise<BlogPost | undefined> {\n    const posts = await this.readJsonFile<BlogPost>('blog.json', []);\n    return posts.find(post => post.id === id);\n  }\n\n  async createBlogPost(insertPost: InsertBlogPost): Promise<BlogPost> {\n    const posts = await this.readJsonFile<BlogPost>('blog.json', []);\n    \n    const post: BlogPost = {\n      ...insertPost,\n      id: randomUUID(),\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    };\n    \n    posts.push(post);\n    await this.writeJsonFile('blog.json', posts);\n    return post;\n  }\n}\n\nexport const storage = new FileStorage();\n","size_bytes":12017},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { z } from \"zod\";\n\n// Product schema\nexport const productSchema = z.object({\n  id: z.string(),\n  name: z.string(),\n  description: z.string(),\n  price: z.number().min(0),\n  category: z.string(),\n  images: z.array(z.string()),\n  stock: z.number().min(0),\n  featured: z.boolean().default(false),\n  tags: z.array(z.string()).default([]),\n  createdAt: z.date(),\n  updatedAt: z.date(),\n});\n\nexport const insertProductSchema = productSchema.omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\n// User schema\nexport const userSchema = z.object({\n  id: z.string(),\n  email: z.string().email(),\n  password: z.string(),\n  firstName: z.string(),\n  lastName: z.string(),\n  address: z.object({\n    street: z.string(),\n    city: z.string(),\n    state: z.string(),\n    zipCode: z.string(),\n    country: z.string(),\n  }).optional(),\n  createdAt: z.date(),\n  updatedAt: z.date(),\n});\n\nexport const insertUserSchema = userSchema.omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const loginSchema = z.object({\n  email: z.string().email(),\n  password: z.string().min(6),\n});\n\n// Order schema\nexport const orderItemSchema = z.object({\n  productId: z.string(),\n  quantity: z.number().min(1),\n  price: z.number().min(0),\n});\n\nexport const orderSchema = z.object({\n  id: z.string(),\n  userId: z.string(),\n  items: z.array(orderItemSchema),\n  total: z.number().min(0),\n  status: z.enum(['pending', 'confirmed', 'shipped', 'delivered', 'cancelled']),\n  shippingAddress: z.object({\n    street: z.string(),\n    city: z.string(),\n    state: z.string(),\n    zipCode: z.string(),\n    country: z.string(),\n  }),\n  createdAt: z.date(),\n  updatedAt: z.date(),\n});\n\nexport const insertOrderSchema = orderSchema.omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\n// Cart item schema\nexport const cartItemSchema = z.object({\n  productId: z.string(),\n  quantity: z.number().min(1),\n});\n\n// Blog schema\nexport const blogPostSchema = z.object({\n  id: z.string(),\n  title: z.string(),\n  content: z.string(),\n  excerpt: z.string(),\n  category: z.string(),\n  image: z.string(),\n  readTime: z.number(),\n  createdAt: z.date(),\n  updatedAt: z.date(),\n});\n\nexport const insertBlogPostSchema = blogPostSchema.omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\n// Type exports\nexport type Product = z.infer<typeof productSchema>;\nexport type InsertProduct = z.infer<typeof insertProductSchema>;\nexport type User = z.infer<typeof userSchema>;\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type LoginCredentials = z.infer<typeof loginSchema>;\nexport type Order = z.infer<typeof orderSchema>;\nexport type InsertOrder = z.infer<typeof insertOrderSchema>;\nexport type OrderItem = z.infer<typeof orderItemSchema>;\nexport type CartItem = z.infer<typeof cartItemSchema>;\nexport type BlogPost = z.infer<typeof blogPostSchema>;\nexport type InsertBlogPost = z.infer<typeof insertBlogPostSchema>;\n","size_bytes":2914},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { Layout } from \"@/components/layout/layout\";\n\n// Pages\nimport Home from \"@/pages/home\";\nimport Products from \"@/pages/products\";\nimport ProductDetail from \"@/pages/product-detail\";\nimport Cart from \"@/pages/cart\";\nimport Checkout from \"@/pages/checkout\";\nimport Profile from \"@/pages/profile\";\nimport Blog from \"@/pages/blog\";\nimport BlogDetail from \"@/pages/blog-detail\";\nimport Login from \"@/pages/login\";\nimport Register from \"@/pages/register\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction Router() {\n  return (\n    <Layout>\n      <Switch>\n        <Route path=\"/\" component={Home} />\n        <Route path=\"/products\" component={Products} />\n        <Route path=\"/products/:id\" component={ProductDetail} />\n        <Route path=\"/cart\" component={Cart} />\n        <Route path=\"/checkout\" component={Checkout} />\n        <Route path=\"/profile\" component={Profile} />\n        <Route path=\"/orders\" component={Profile} />\n        <Route path=\"/blog\" component={Blog} />\n        <Route path=\"/blog/:id\" component={BlogDetail} />\n        <Route path=\"/login\" component={Login} />\n        <Route path=\"/register\" component={Register} />\n        <Route component={NotFound} />\n      </Switch>\n    </Layout>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <Toaster />\n        <Router />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":1702},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(0 0% 100%);\n  --foreground: hsl(210 25% 7.8431%);\n  --card: hsl(180 6.6667% 97.0588%);\n  --card-foreground: hsl(210 25% 7.8431%);\n  --popover: hsl(0 0% 100%);\n  --popover-foreground: hsl(210 25% 7.8431%);\n  --primary: hsl(203.8863 88.2845% 53.1373%);\n  --primary-foreground: hsl(0 0% 100%);\n  --secondary: hsl(210 25% 7.8431%);\n  --secondary-foreground: hsl(0 0% 100%);\n  --muted: hsl(240 1.9608% 90%);\n  --muted-foreground: hsl(210 25% 7.8431%);\n  --accent: hsl(211.5789 51.3514% 92.7451%);\n  --accent-foreground: hsl(203.8863 88.2845% 53.1373%);\n  --destructive: hsl(356.3033 90.5579% 54.3137%);\n  --destructive-foreground: hsl(0 0% 100%);\n  --border: hsl(201.4286 30.4348% 90.9804%);\n  --input: hsl(200 23.0769% 97.4510%);\n  --ring: hsl(202.8169 89.1213% 53.1373%);\n  --chart-1: hsl(203.8863 88.2845% 53.1373%);\n  --chart-2: hsl(159.7826 100% 36.0784%);\n  --chart-3: hsl(42.0290 92.8251% 56.2745%);\n  --chart-4: hsl(147.1429 78.5047% 41.9608%);\n  --chart-5: hsl(341.4894 75.2000% 50.9804%);\n  --sidebar: hsl(180 6.6667% 97.0588%);\n  --sidebar-foreground: hsl(210 25% 7.8431%);\n  --sidebar-primary: hsl(203.8863 88.2845% 53.1373%);\n  --sidebar-primary-foreground: hsl(0 0% 100%);\n  --sidebar-accent: hsl(211.5789 51.3514% 92.7451%);\n  --sidebar-accent-foreground: hsl(203.8863 88.2845% 53.1373%);\n  --sidebar-border: hsl(205.0000 25.0000% 90.5882%);\n  --sidebar-ring: hsl(202.8169 89.1213% 53.1373%);\n  --font-sans: Open Sans, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 1.3rem;\n  --shadow-2xs: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 1px 2px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 1px 2px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 2px 4px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 4px 6px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 8px 10px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n}\n\n.dark {\n  --background: hsl(0 0% 0%);\n  --foreground: hsl(200 6.6667% 91.1765%);\n  --card: hsl(228 9.8039% 10%);\n  --card-foreground: hsl(0 0% 85.0980%);\n  --popover: hsl(0 0% 0%);\n  --popover-foreground: hsl(200 6.6667% 91.1765%);\n  --primary: hsl(203.7736 87.6033% 52.5490%);\n  --primary-foreground: hsl(0 0% 100%);\n  --secondary: hsl(195.0000 15.3846% 94.9020%);\n  --secondary-foreground: hsl(210 25% 7.8431%);\n  --muted: hsl(0 0% 9.4118%);\n  --muted-foreground: hsl(210 3.3898% 46.2745%);\n  --accent: hsl(205.7143 70% 7.8431%);\n  --accent-foreground: hsl(203.7736 87.6033% 52.5490%);\n  --destructive: hsl(356.3033 90.5579% 54.3137%);\n  --destructive-foreground: hsl(0 0% 100%);\n  --border: hsl(210 5.2632% 14.9020%);\n  --input: hsl(207.6923 27.6596% 18.4314%);\n  --ring: hsl(202.8169 89.1213% 53.1373%);\n  --chart-1: hsl(203.8863 88.2845% 53.1373%);\n  --chart-2: hsl(159.7826 100% 36.0784%);\n  --chart-3: hsl(42.0290 92.8251% 56.2745%);\n  --chart-4: hsl(147.1429 78.5047% 41.9608%);\n  --chart-5: hsl(341.4894 75.2000% 50.9804%);\n  --sidebar: hsl(228 9.8039% 10%);\n  --sidebar-foreground: hsl(0 0% 85.0980%);\n  --sidebar-primary: hsl(202.8169 89.1213% 53.1373%);\n  --sidebar-primary-foreground: hsl(0 0% 100%);\n  --sidebar-accent: hsl(205.7143 70% 7.8431%);\n  --sidebar-accent-foreground: hsl(203.7736 87.6033% 52.5490%);\n  --sidebar-border: hsl(205.7143 15.7895% 26.0784%);\n  --sidebar-ring: hsl(202.8169 89.1213% 53.1373%);\n  --font-sans: Open Sans, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 1.3rem;\n  --shadow-2xs: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 1px 2px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 1px 2px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 2px 4px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 4px 6px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 8px 10px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}\n\n@layer components {\n  .gradient-hero {\n    @apply bg-gradient-to-br from-primary via-blue-500 to-blue-600;\n  }\n}","size_bytes":5169},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/hooks/use-auth.ts":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { authApi } from \"@/lib/auth\";\nimport type { User, LoginCredentials, InsertUser } from \"@shared/schema\";\nimport { useToast } from \"./use-toast\";\n\nexport function useAuth() {\n  const queryClient = useQueryClient();\n  const { toast } = useToast();\n  \n  const { data: user, isLoading, error } = useQuery({\n    queryKey: ['/api/auth/me'],\n    queryFn: () => authApi.getMe().then(res => res.user),\n    retry: false,\n    staleTime: 1000 * 60 * 5, // 5 minutes\n  });\n\n  const loginMutation = useMutation({\n    mutationFn: authApi.login,\n    onSuccess: (data) => {\n      queryClient.setQueryData(['/api/auth/me'], data.user);\n      toast({\n        title: \"Welcome back!\",\n        description: \"You have been logged in successfully.\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Login failed\",\n        description: error.message || \"Invalid credentials\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const registerMutation = useMutation({\n    mutationFn: authApi.register,\n    onSuccess: (data) => {\n      queryClient.setQueryData(['/api/auth/me'], data.user);\n      toast({\n        title: \"Account created!\",\n        description: \"Welcome to TechTreasure.\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Registration failed\",\n        description: error.message || \"Please try again\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const logoutMutation = useMutation({\n    mutationFn: authApi.logout,\n    onSuccess: () => {\n      queryClient.setQueryData(['/api/auth/me'], null);\n      queryClient.clear();\n      toast({\n        title: \"Logged out\",\n        description: \"You have been logged out successfully.\",\n      });\n    },\n  });\n\n  return {\n    user,\n    isLoading,\n    isAuthenticated: !!user && !error,\n    login: loginMutation.mutate,\n    register: registerMutation.mutate,\n    logout: logoutMutation.mutate,\n    isLoginPending: loginMutation.isPending,\n    isRegisterPending: registerMutation.isPending,\n    isLogoutPending: logoutMutation.isPending,\n  };\n}\n","size_bytes":2181},"client/src/hooks/use-cart.ts":{"content":"import { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport type { CartItem, Product } from \"@shared/schema\";\nimport { useToast } from \"./use-toast\";\n\ninterface CartItemWithProduct extends CartItem {\n  product: Product;\n}\n\nexport function useCart() {\n  const queryClient = useQueryClient();\n  const { toast } = useToast();\n\n  const { data: cartItems = [], isLoading } = useQuery<CartItemWithProduct[]>({\n    queryKey: ['/api/cart'],\n    staleTime: 1000 * 30, // 30 seconds\n  });\n\n  const addToCartMutation = useMutation({\n    mutationFn: async ({ productId, quantity = 1 }: { productId: string; quantity?: number }) => {\n      await apiRequest('POST', '/api/cart', { productId, quantity });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/cart'] });\n      toast({\n        title: \"Added to cart\",\n        description: \"Item has been added to your cart.\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Failed to add item\",\n        description: error.message || \"Please try again\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updateQuantityMutation = useMutation({\n    mutationFn: async ({ productId, quantity }: { productId: string; quantity: number }) => {\n      await apiRequest('PUT', `/api/cart/${productId}`, { quantity });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/cart'] });\n    },\n  });\n\n  const removeFromCartMutation = useMutation({\n    mutationFn: async (productId: string) => {\n      await apiRequest('DELETE', `/api/cart/${productId}`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/cart'] });\n      toast({\n        title: \"Item removed\",\n        description: \"Item has been removed from your cart.\",\n      });\n    },\n  });\n\n  const totalItems = cartItems.reduce((sum, item) => sum + item.quantity, 0);\n  const totalPrice = cartItems.reduce((sum, item) => sum + (item.product?.price || 0) * item.quantity, 0);\n\n  return {\n    cartItems,\n    totalItems,\n    totalPrice,\n    isLoading,\n    addToCart: addToCartMutation.mutate,\n    updateQuantity: updateQuantityMutation.mutate,\n    removeFromCart: removeFromCartMutation.mutate,\n    isAddingToCart: addToCartMutation.isPending,\n  };\n}\n","size_bytes":2339},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/auth.ts":{"content":"import type { User, LoginCredentials, InsertUser } from \"@shared/schema\";\nimport { apiRequest } from \"./queryClient\";\n\nexport interface AuthResponse {\n  user: Omit<User, 'password'>;\n}\n\nexport const authApi = {\n  login: async (credentials: LoginCredentials): Promise<AuthResponse> => {\n    const response = await apiRequest('POST', '/api/auth/login', credentials);\n    return response.json();\n  },\n\n  register: async (userData: InsertUser): Promise<AuthResponse> => {\n    const response = await apiRequest('POST', '/api/auth/register', userData);\n    return response.json();\n  },\n\n  logout: async (): Promise<void> => {\n    await apiRequest('POST', '/api/auth/logout');\n  },\n\n  getMe: async (): Promise<AuthResponse> => {\n    const response = await apiRequest('GET', '/api/auth/me');\n    return response.json();\n  },\n};\n","size_bytes":820},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/blog-detail.tsx":{"content":"import { useParams } from \"wouter\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Calendar, Clock, ArrowLeft, Share2 } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Link } from \"wouter\";\nimport type { BlogPost } from \"@shared/schema\";\nimport NotFound from \"./not-found\";\n\nexport default function BlogDetail() {\n  const { id } = useParams();\n\n  const { data: post, isLoading, error } = useQuery<BlogPost>({\n    queryKey: ['/api/blog', id],\n    queryFn: async () => {\n      const response = await fetch(`/api/blog/${id}`);\n      if (!response.ok) {\n        if (response.status === 404) {\n          throw new Error('Blog post not found');\n        }\n        throw new Error('Failed to fetch blog post');\n      }\n      return response.json();\n    },\n  });\n\n  if (isLoading) {\n    return (\n      <div className=\"container mx-auto px-4 py-8\">\n        <div className=\"text-center py-12\">\n          <p className=\"text-muted-foreground\" data-testid=\"text-loading-blog\">Loading article...</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (error || !post) {\n    return <NotFound />;\n  }\n\n  const formattedDate = new Date(post.createdAt).toLocaleDateString('en-US', {\n    year: 'numeric',\n    month: 'long',\n    day: 'numeric'\n  });\n\n  const handleShare = () => {\n    if (navigator.share) {\n      navigator.share({\n        title: post.title,\n        text: post.excerpt,\n        url: window.location.href,\n      });\n    } else {\n      navigator.clipboard.writeText(window.location.href);\n    }\n  };\n\n  return (\n    <div className=\"container mx-auto px-4 py-8\">\n      {/* Back Button */}\n      <div className=\"mb-6\">\n        <Button variant=\"ghost\" asChild data-testid=\"button-back-to-blog\">\n          <Link href=\"/blog\">\n            <ArrowLeft className=\"h-4 w-4 mr-2\" />\n            Back to Blog\n          </Link>\n        </Button>\n      </div>\n\n      <article className=\"max-w-4xl mx-auto\">\n        {/* Article Header */}\n        <div className=\"mb-8\">\n          <div className=\"flex items-center gap-2 mb-4\">\n            <Badge variant=\"secondary\" data-testid=\"badge-blog-category\">\n              {post.category}\n            </Badge>\n            <div className=\"flex items-center text-sm text-muted-foreground gap-4\">\n              <div className=\"flex items-center gap-1\">\n                <Calendar className=\"h-4 w-4\" />\n                <span data-testid=\"text-blog-date\">{formattedDate}</span>\n              </div>\n              <div className=\"flex items-center gap-1\">\n                <Clock className=\"h-4 w-4\" />\n                <span data-testid=\"text-blog-read-time\">{post.readTime} min read</span>\n              </div>\n            </div>\n          </div>\n\n          <h1 className=\"text-4xl md:text-5xl font-bold mb-4\" data-testid=\"text-blog-title\">\n            {post.title}\n          </h1>\n\n          <p className=\"text-xl text-muted-foreground mb-6\" data-testid=\"text-blog-excerpt\">\n            {post.excerpt}\n          </p>\n\n          <div className=\"flex items-center justify-between\">\n            <div className=\"text-sm text-muted-foreground\">\n              Published on {formattedDate}\n            </div>\n            <Button variant=\"outline\" size=\"sm\" onClick={handleShare} data-testid=\"button-share\">\n              <Share2 className=\"h-4 w-4 mr-2\" />\n              Share\n            </Button>\n          </div>\n        </div>\n\n        {/* Featured Image */}\n        {post.image && (\n          <div className=\"mb-8\">\n            <img\n              src={post.image}\n              alt={post.title}\n              className=\"w-full h-auto rounded-lg\"\n              data-testid=\"img-blog-featured\"\n            />\n          </div>\n        )}\n\n        <Separator className=\"mb-8\" />\n\n        {/* Article Content */}\n        <div className=\"prose prose-lg max-w-none\" data-testid=\"content-blog-article\">\n          {/* For demo purposes, we'll display the content as simple paragraphs */}\n          {post.content.split('\\n\\n').map((paragraph, index) => (\n            <p key={index} className=\"mb-4 leading-relaxed\">\n              {paragraph}\n            </p>\n          ))}\n        </div>\n\n        <Separator className=\"my-8\" />\n\n        {/* Article Footer */}\n        <div className=\"flex flex-col md:flex-row justify-between items-center gap-4\">\n          <div className=\"text-sm text-muted-foreground\">\n            Thanks for reading! Share this article if you found it helpful.\n          </div>\n          <div className=\"flex gap-2\">\n            <Button variant=\"outline\" size=\"sm\" onClick={handleShare} data-testid=\"button-share-footer\">\n              <Share2 className=\"h-4 w-4 mr-2\" />\n              Share Article\n            </Button>\n            <Button variant=\"outline\" size=\"sm\" asChild data-testid=\"button-more-articles\">\n              <Link href=\"/blog\">More Articles</Link>\n            </Button>\n          </div>\n        </div>\n      </article>\n    </div>\n  );\n}\n","size_bytes":5021},"client/src/pages/blog.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { useState } from \"react\";\nimport { Search } from \"lucide-react\";\nimport { Input } from \"@/components/ui/input\";\nimport { Button } from \"@/components/ui/button\";\nimport { BlogCard } from \"@/components/blog/blog-card\";\nimport type { BlogPost } from \"@shared/schema\";\n\nexport default function Blog() {\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [currentPage, setCurrentPage] = useState(1);\n  const postsPerPage = 9;\n\n  const { data: blogData, isLoading } = useQuery<{ posts: BlogPost[]; total: number }>({\n    queryKey: ['/api/blog', { page: currentPage, limit: postsPerPage, search: searchQuery }],\n    queryFn: async () => {\n      const params = new URLSearchParams({\n        page: currentPage.toString(),\n        limit: postsPerPage.toString(),\n      });\n      \n      if (searchQuery) {\n        params.append('search', searchQuery);\n      }\n      \n      const response = await fetch(`/api/blog?${params}`);\n      if (!response.ok) {\n        throw new Error('Failed to fetch blog posts');\n      }\n      return response.json();\n    },\n  });\n\n  const handleSearch = (e: React.FormEvent) => {\n    e.preventDefault();\n    setCurrentPage(1); // Reset to first page when searching\n  };\n\n  const totalPages = Math.ceil((blogData?.total || 0) / postsPerPage);\n\n  return (\n    <div className=\"container mx-auto px-4 py-8\">\n      {/* Header */}\n      <div className=\"text-center mb-12\">\n        <h1 className=\"text-4xl font-bold mb-4\" data-testid=\"text-blog-title\">Our Blog</h1>\n        <p className=\"text-xl text-muted-foreground mb-8\">\n          Stay updated with the latest trends, tips, and insights\n        </p>\n        \n        {/* Search */}\n        <form onSubmit={handleSearch} className=\"max-w-md mx-auto\">\n          <div className=\"relative\">\n            <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground h-4 w-4\" />\n            <Input\n              type=\"text\"\n              placeholder=\"Search articles...\"\n              value={searchQuery}\n              onChange={(e) => setSearchQuery(e.target.value)}\n              className=\"pl-10\"\n              data-testid=\"input-search-blog\"\n            />\n          </div>\n        </form>\n      </div>\n\n      {/* Blog Posts */}\n      {isLoading ? (\n        <div className=\"text-center py-12\">\n          <p className=\"text-muted-foreground\" data-testid=\"text-loading-blog\">Loading articles...</p>\n        </div>\n      ) : blogData?.posts && blogData.posts.length > 0 ? (\n        <>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8 mb-8\">\n            {blogData.posts.map((post) => (\n              <BlogCard key={post.id} post={post} />\n            ))}\n          </div>\n\n          {/* Pagination */}\n          {totalPages > 1 && (\n            <div className=\"flex justify-center items-center space-x-2\">\n              <Button\n                variant=\"outline\"\n                disabled={currentPage === 1}\n                onClick={() => setCurrentPage(currentPage - 1)}\n                data-testid=\"button-blog-prev\"\n              >\n                Previous\n              </Button>\n              \n              {Array.from({ length: totalPages }, (_, i) => i + 1).map((page) => (\n                <Button\n                  key={page}\n                  variant={currentPage === page ? \"default\" : \"outline\"}\n                  onClick={() => setCurrentPage(page)}\n                  data-testid={`button-blog-page-${page}`}\n                >\n                  {page}\n                </Button>\n              ))}\n              \n              <Button\n                variant=\"outline\"\n                disabled={currentPage === totalPages}\n                onClick={() => setCurrentPage(currentPage + 1)}\n                data-testid=\"button-blog-next\"\n              >\n                Next\n              </Button>\n            </div>\n          )}\n        </>\n      ) : (\n        <div className=\"text-center py-12\">\n          <p className=\"text-muted-foreground\" data-testid=\"text-no-blog-posts\">No blog posts available at the moment.</p>\n        </div>\n      )}\n    </div>\n  );\n}\n","size_bytes":4157},"client/src/pages/cart.tsx":{"content":"import { Link } from \"wouter\";\nimport { useCart } from \"@/hooks/use-cart\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Trash2, Plus, Minus, ShoppingBag } from \"lucide-react\";\n\nexport default function Cart() {\n  const { cartItems, totalPrice, updateQuantity, removeFromCart, isLoading } = useCart();\n  const { isAuthenticated } = useAuth();\n\n  const shipping = totalPrice > 0 ? 9.99 : 0;\n  const tax = totalPrice * 0.08; // 8% tax\n  const total = totalPrice + shipping + tax;\n\n  if (isLoading) {\n    return (\n      <div className=\"container mx-auto px-4 py-8\">\n        <div className=\"text-center py-12\">\n          <p className=\"text-muted-foreground\" data-testid=\"text-loading\">Loading cart...</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (cartItems.length === 0) {\n    return (\n      <div className=\"container mx-auto px-4 py-8\">\n        <div className=\"text-center py-12\">\n          <ShoppingBag className=\"h-24 w-24 text-muted-foreground mx-auto mb-4\" />\n          <h1 className=\"text-2xl font-bold mb-2\" data-testid=\"text-empty-cart\">Your cart is empty</h1>\n          <p className=\"text-muted-foreground mb-6\">Add some products to your cart to get started.</p>\n          <Button asChild data-testid=\"button-continue-shopping\">\n            <Link href=\"/products\">Continue Shopping</Link>\n          </Button>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"container mx-auto px-4 py-8\">\n      <h1 className=\"text-3xl font-bold mb-8\" data-testid=\"text-cart-title\">Shopping Cart</h1>\n      \n      <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8\">\n        {/* Cart Items */}\n        <div className=\"lg:col-span-2\">\n          <Card>\n            <CardHeader>\n              <CardTitle data-testid=\"text-cart-items-title\">Cart Items ({cartItems.length})</CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              {cartItems.map((item) => (\n                <div key={item.productId} className=\"flex items-center space-x-4 py-4 border-b border-border last:border-b-0\" data-testid={`cart-item-${item.productId}`}>\n                  {/* Product Image */}\n                  {item.product?.images?.[0] && (\n                    <img\n                      src={item.product.images[0]}\n                      alt={item.product.name}\n                      className=\"w-20 h-20 object-cover rounded-md\"\n                      loading=\"lazy\"\n                      data-testid={`img-cart-product-${item.productId}`}\n                    />\n                  )}\n                  \n                  {/* Product Details */}\n                  <div className=\"flex-1\">\n                    <h3 className=\"font-semibold\" data-testid={`text-cart-product-name-${item.productId}`}>\n                      {item.product?.name || 'Unknown Product'}\n                    </h3>\n                    <p className=\"text-sm text-muted-foreground\" data-testid={`text-cart-product-category-${item.productId}`}>\n                      {item.product?.category}\n                    </p>\n                    <p className=\"font-medium\" data-testid={`text-cart-product-price-${item.productId}`}>\n                      ${item.product?.price?.toFixed(2) || '0.00'}\n                    </p>\n                  </div>\n                  \n                  {/* Quantity Controls */}\n                  <div className=\"flex items-center space-x-2\">\n                    <Button\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={() => updateQuantity({ productId: item.productId, quantity: Math.max(0, item.quantity - 1) })}\n                      data-testid={`button-cart-decrease-${item.productId}`}\n                    >\n                      <Minus className=\"h-4 w-4\" />\n                    </Button>\n                    <span className=\"w-12 text-center\" data-testid={`text-cart-quantity-${item.productId}`}>\n                      {item.quantity}\n                    </span>\n                    <Button\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={() => updateQuantity({ productId: item.productId, quantity: item.quantity + 1 })}\n                      data-testid={`button-cart-increase-${item.productId}`}\n                    >\n                      <Plus className=\"h-4 w-4\" />\n                    </Button>\n                  </div>\n                  \n                  {/* Item Total */}\n                  <div className=\"text-right\">\n                    <p className=\"font-semibold\" data-testid={`text-cart-item-total-${item.productId}`}>\n                      ${((item.product?.price || 0) * item.quantity).toFixed(2)}\n                    </p>\n                    <Button\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      className=\"text-destructive hover:text-destructive mt-1\"\n                      onClick={() => removeFromCart(item.productId)}\n                      data-testid={`button-cart-remove-${item.productId}`}\n                    >\n                      <Trash2 className=\"h-4 w-4 mr-1\" />\n                      Remove\n                    </Button>\n                  </div>\n                </div>\n              ))}\n            </CardContent>\n          </Card>\n        </div>\n        \n        {/* Order Summary */}\n        <div>\n          <Card>\n            <CardHeader>\n              <CardTitle data-testid=\"text-order-summary-title\">Order Summary</CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"flex justify-between\" data-testid=\"row-subtotal\">\n                <span>Subtotal</span>\n                <span>${totalPrice.toFixed(2)}</span>\n              </div>\n              <div className=\"flex justify-between\" data-testid=\"row-shipping\">\n                <span>Shipping</span>\n                <span>${shipping.toFixed(2)}</span>\n              </div>\n              <div className=\"flex justify-between\" data-testid=\"row-tax\">\n                <span>Tax</span>\n                <span>${tax.toFixed(2)}</span>\n              </div>\n              \n              <Separator />\n              \n              <div className=\"flex justify-between font-semibold text-lg\" data-testid=\"row-total\">\n                <span>Total</span>\n                <span>${total.toFixed(2)}</span>\n              </div>\n              \n              <div className=\"space-y-2 mt-6\">\n                {isAuthenticated ? (\n                  <Button asChild className=\"w-full\" data-testid=\"button-proceed-checkout\">\n                    <Link href=\"/checkout\">Proceed to Checkout</Link>\n                  </Button>\n                ) : (\n                  <>\n                    <Button asChild className=\"w-full\" data-testid=\"button-login-checkout\">\n                      <Link href=\"/login\">Login to Checkout</Link>\n                    </Button>\n                    <p className=\"text-sm text-muted-foreground text-center\">\n                      Already have an account? <Link href=\"/login\" className=\"text-primary hover:underline\">Sign in</Link>\n                    </p>\n                  </>\n                )}\n                \n                <Button variant=\"outline\" asChild className=\"w-full\" data-testid=\"button-continue-shopping-cart\">\n                  <Link href=\"/products\">Continue Shopping</Link>\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":7663},"client/src/pages/checkout.tsx":{"content":"import { useState } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { CreditCard, Truck, ShieldCheck } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { useCart } from \"@/hooks/use-cart\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\nconst checkoutSchema = z.object({\n  shippingAddress: z.object({\n    street: z.string().min(1, \"Street address is required\"),\n    city: z.string().min(1, \"City is required\"),\n    state: z.string().min(1, \"State is required\"),\n    zipCode: z.string().min(5, \"Valid zip code is required\"),\n    country: z.string().min(1, \"Country is required\"),\n  }),\n  paymentMethod: z.object({\n    cardNumber: z.string().min(16, \"Valid card number is required\"),\n    expiryDate: z.string().min(5, \"Valid expiry date is required\"),\n    cvv: z.string().min(3, \"Valid CVV is required\"),\n    cardholderName: z.string().min(1, \"Cardholder name is required\"),\n  }),\n});\n\ntype CheckoutFormData = z.infer<typeof checkoutSchema>;\n\nexport default function Checkout() {\n  const [, navigate] = useLocation();\n  const { cartItems, totalPrice } = useCart();\n  const { user, isAuthenticated } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const {\n    register,\n    handleSubmit,\n    formState: { errors },\n  } = useForm<CheckoutFormData>({\n    resolver: zodResolver(checkoutSchema),\n    defaultValues: {\n      shippingAddress: {\n        street: user?.address?.street || \"\",\n        city: user?.address?.city || \"\",\n        state: user?.address?.state || \"\",\n        zipCode: user?.address?.zipCode || \"\",\n        country: user?.address?.country || \"US\",\n      },\n    },\n  });\n\n  const checkoutMutation = useMutation({\n    mutationFn: async (data: CheckoutFormData) => {\n      // Calculate order details\n      const shipping = 9.99;\n      const tax = totalPrice * 0.08;\n      const total = totalPrice + shipping + tax;\n\n      const orderData = {\n        items: cartItems.map(item => ({\n          productId: item.productId,\n          quantity: item.quantity,\n          price: item.product?.price || 0,\n        })),\n        total,\n        status: 'pending' as const,\n        shippingAddress: data.shippingAddress,\n      };\n\n      const response = await apiRequest('POST', '/api/checkout', orderData);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/cart'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/orders'] });\n      toast({\n        title: \"Order placed successfully!\",\n        description: \"Thank you for your purchase. We'll send you a confirmation email shortly.\",\n      });\n      navigate('/profile');\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Checkout failed\",\n        description: error.message || \"Please try again\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  if (!isAuthenticated) {\n    navigate('/login');\n    return null;\n  }\n\n  if (cartItems.length === 0) {\n    navigate('/cart');\n    return null;\n  }\n\n  const shipping = 9.99;\n  const tax = totalPrice * 0.08;\n  const total = totalPrice + shipping + tax;\n\n  const onSubmit = (data: CheckoutFormData) => {\n    checkoutMutation.mutate(data);\n  };\n\n  return (\n    <div className=\"container mx-auto px-4 py-8\">\n      <h1 className=\"text-3xl font-bold mb-8\" data-testid=\"text-checkout-title\">Checkout</h1>\n      \n      <form onSubmit={handleSubmit(onSubmit)}>\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8\">\n          {/* Checkout Form */}\n          <div className=\"space-y-6\">\n            {/* Shipping Address */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\" data-testid=\"text-shipping-title\">\n                  <Truck className=\"h-5 w-5\" />\n                  Shipping Address\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div>\n                  <Label htmlFor=\"street\">Street Address</Label>\n                  <Input\n                    id=\"street\"\n                    {...register(\"shippingAddress.street\")}\n                    data-testid=\"input-street\"\n                  />\n                  {errors.shippingAddress?.street && (\n                    <p className=\"text-sm text-destructive mt-1\">{errors.shippingAddress.street.message}</p>\n                  )}\n                </div>\n                \n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div>\n                    <Label htmlFor=\"city\">City</Label>\n                    <Input\n                      id=\"city\"\n                      {...register(\"shippingAddress.city\")}\n                      data-testid=\"input-city\"\n                    />\n                    {errors.shippingAddress?.city && (\n                      <p className=\"text-sm text-destructive mt-1\">{errors.shippingAddress.city.message}</p>\n                    )}\n                  </div>\n                  <div>\n                    <Label htmlFor=\"state\">State</Label>\n                    <Input\n                      id=\"state\"\n                      {...register(\"shippingAddress.state\")}\n                      data-testid=\"input-state\"\n                    />\n                    {errors.shippingAddress?.state && (\n                      <p className=\"text-sm text-destructive mt-1\">{errors.shippingAddress.state.message}</p>\n                    )}\n                  </div>\n                </div>\n                \n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div>\n                    <Label htmlFor=\"zipCode\">ZIP Code</Label>\n                    <Input\n                      id=\"zipCode\"\n                      {...register(\"shippingAddress.zipCode\")}\n                      data-testid=\"input-zip\"\n                    />\n                    {errors.shippingAddress?.zipCode && (\n                      <p className=\"text-sm text-destructive mt-1\">{errors.shippingAddress.zipCode.message}</p>\n                    )}\n                  </div>\n                  <div>\n                    <Label htmlFor=\"country\">Country</Label>\n                    <Input\n                      id=\"country\"\n                      {...register(\"shippingAddress.country\")}\n                      data-testid=\"input-country\"\n                    />\n                    {errors.shippingAddress?.country && (\n                      <p className=\"text-sm text-destructive mt-1\">{errors.shippingAddress.country.message}</p>\n                    )}\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Payment Information */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\" data-testid=\"text-payment-title\">\n                  <CreditCard className=\"h-5 w-5\" />\n                  Payment Information\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div>\n                  <Label htmlFor=\"cardholderName\">Cardholder Name</Label>\n                  <Input\n                    id=\"cardholderName\"\n                    {...register(\"paymentMethod.cardholderName\")}\n                    data-testid=\"input-cardholder-name\"\n                  />\n                  {errors.paymentMethod?.cardholderName && (\n                    <p className=\"text-sm text-destructive mt-1\">{errors.paymentMethod.cardholderName.message}</p>\n                  )}\n                </div>\n                \n                <div>\n                  <Label htmlFor=\"cardNumber\">Card Number</Label>\n                  <Input\n                    id=\"cardNumber\"\n                    placeholder=\"1234 5678 9012 3456\"\n                    {...register(\"paymentMethod.cardNumber\")}\n                    data-testid=\"input-card-number\"\n                  />\n                  {errors.paymentMethod?.cardNumber && (\n                    <p className=\"text-sm text-destructive mt-1\">{errors.paymentMethod.cardNumber.message}</p>\n                  )}\n                </div>\n                \n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div>\n                    <Label htmlFor=\"expiryDate\">Expiry Date</Label>\n                    <Input\n                      id=\"expiryDate\"\n                      placeholder=\"MM/YY\"\n                      {...register(\"paymentMethod.expiryDate\")}\n                      data-testid=\"input-expiry\"\n                    />\n                    {errors.paymentMethod?.expiryDate && (\n                      <p className=\"text-sm text-destructive mt-1\">{errors.paymentMethod.expiryDate.message}</p>\n                    )}\n                  </div>\n                  <div>\n                    <Label htmlFor=\"cvv\">CVV</Label>\n                    <Input\n                      id=\"cvv\"\n                      placeholder=\"123\"\n                      {...register(\"paymentMethod.cvv\")}\n                      data-testid=\"input-cvv\"\n                    />\n                    {errors.paymentMethod?.cvv && (\n                      <p className=\"text-sm text-destructive mt-1\">{errors.paymentMethod.cvv.message}</p>\n                    )}\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Order Summary */}\n          <div>\n            <Card>\n              <CardHeader>\n                <CardTitle data-testid=\"text-order-summary\">Order Summary</CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                {/* Order Items */}\n                <div className=\"space-y-3 max-h-60 overflow-y-auto\">\n                  {cartItems.map((item) => (\n                    <div key={item.productId} className=\"flex items-center space-x-3\" data-testid={`checkout-item-${item.productId}`}>\n                      {item.product?.images?.[0] && (\n                        <img\n                          src={item.product.images[0]}\n                          alt={item.product.name}\n                          className=\"w-12 h-12 object-cover rounded-md\"\n                          loading=\"lazy\"\n                        />\n                      )}\n                      <div className=\"flex-1\">\n                        <p className=\"font-medium text-sm\">{item.product?.name}</p>\n                        <p className=\"text-xs text-muted-foreground\">Qty: {item.quantity}</p>\n                      </div>\n                      <p className=\"font-medium text-sm\">\n                        ${((item.product?.price || 0) * item.quantity).toFixed(2)}\n                      </p>\n                    </div>\n                  ))}\n                </div>\n                \n                <Separator />\n                \n                {/* Totals */}\n                <div className=\"space-y-2\">\n                  <div className=\"flex justify-between\" data-testid=\"checkout-subtotal\">\n                    <span>Subtotal</span>\n                    <span>${totalPrice.toFixed(2)}</span>\n                  </div>\n                  <div className=\"flex justify-between\" data-testid=\"checkout-shipping\">\n                    <span>Shipping</span>\n                    <span>${shipping.toFixed(2)}</span>\n                  </div>\n                  <div className=\"flex justify-between\" data-testid=\"checkout-tax\">\n                    <span>Tax</span>\n                    <span>${tax.toFixed(2)}</span>\n                  </div>\n                  \n                  <Separator />\n                  \n                  <div className=\"flex justify-between font-semibold text-lg\" data-testid=\"checkout-total\">\n                    <span>Total</span>\n                    <span>${total.toFixed(2)}</span>\n                  </div>\n                </div>\n                \n                <Button\n                  type=\"submit\"\n                  className=\"w-full\"\n                  disabled={checkoutMutation.isPending}\n                  data-testid=\"button-place-order\"\n                >\n                  <ShieldCheck className=\"h-4 w-4 mr-2\" />\n                  {checkoutMutation.isPending ? 'Processing...' : 'Place Order'}\n                </Button>\n                \n                <div className=\"text-xs text-muted-foreground text-center\">\n                  By placing your order, you agree to our Terms of Service and Privacy Policy.\n                  Your payment information is secure and encrypted.\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </form>\n    </div>\n  );\n}\n","size_bytes":13093},"client/src/pages/home.tsx":{"content":"import { Link } from \"wouter\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { ProductGrid } from \"@/components/product/product-grid\";\nimport { BlogCard } from \"@/components/blog/blog-card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Carousel, CarouselContent, CarouselItem, CarouselNext, CarouselPrevious } from \"@/components/ui/carousel\";\nimport { useCart } from \"@/hooks/use-cart\";\nimport { ShoppingCart } from \"lucide-react\";\nimport type { Product, BlogPost } from \"@shared/schema\";\n\nexport default function Home() {\n  const { addToCart } = useCart();\n\n  // Featured products query\n  const { data: productsData } = useQuery<{ products: Product[]; total: number }>({\n    queryKey: ['/api/products', { limit: 8 }],\n    queryFn: async () => {\n      const response = await fetch('/api/products?limit=8');\n      return response.json();\n    },\n  });\n\n  // Blog posts query\n  const { data: blogData } = useQuery<{ posts: BlogPost[]; total: number }>({\n    queryKey: ['/api/blog', { limit: 3 }],\n    queryFn: async () => {\n      const response = await fetch('/api/blog?limit=3');\n      return response.json();\n    },\n  });\n\n  const handleNewsletterSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    // TODO: Implement newsletter subscription\n  };\n\n  return (\n    <div>\n      {/* Hero Section */}\n      <section className=\"gradient-hero text-primary-foreground\">\n        <div className=\"container mx-auto px-4 py-20\">\n          <div className=\"max-w-4xl mx-auto text-center\">\n            <h1 className=\"text-4xl md:text-6xl font-bold mb-6\" data-testid=\"text-hero-title\">\n              Tech Treasures Await\n            </h1>\n            <p className=\"text-xl md:text-2xl mb-8 text-primary-foreground/90\" data-testid=\"text-hero-description\">\n              Discover the latest in laptops, phones, headphones, and custom PCs\n            </p>\n            <div className=\"flex flex-col sm:flex-row gap-4 justify-center\">\n              <Button asChild className=\"bg-accent text-accent-foreground hover:bg-accent/90\" data-testid=\"button-shop-now\">\n                <Link href=\"/products\">Shop Now</Link>\n              </Button>\n              <Button \n                variant=\"outline\" \n                className=\"border-primary-foreground/50 text-primary-foreground bg-primary-foreground/10 hover:bg-primary-foreground/20 hover:text-primary-foreground\" \n                data-testid=\"button-learn-more\"\n                asChild\n              >\n                <Link href=\"/products\">Learn More</Link>\n              </Button>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Hero Product Slider */}\n      <section className=\"py-16\">\n        <div className=\"container mx-auto px-4\">\n          <h2 className=\"text-3xl font-bold text-center mb-12\" data-testid=\"text-featured-slider-title\">Featured Tech</h2>\n          \n          {productsData?.products && productsData.products.length >= 3 ? (\n            <Carousel className=\"w-full max-w-5xl mx-auto\" opts={{ align: \"start\", loop: true }}>\n              <CarouselContent className=\"-ml-2 md:-ml-4\">\n                {productsData.products.slice(0, 3).map((product) => (\n                  <CarouselItem key={product.id} className=\"pl-2 md:pl-4\" data-testid={`slider-item-${product.id}`}>\n                    <div className=\"relative overflow-hidden rounded-xl bg-gradient-to-br from-primary to-primary/80 text-primary-foreground\">\n                      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-8 p-8 md:p-12\">\n                        <div className=\"flex flex-col justify-center space-y-6\">\n                          <div>\n                            <h3 className=\"text-3xl md:text-4xl font-bold mb-4\" data-testid={`slider-product-name-${product.id}`}>\n                              {product.name}\n                            </h3>\n                            <p className=\"text-lg text-primary-foreground/90 mb-6\" data-testid={`slider-product-description-${product.id}`}>\n                              {product.description}\n                            </p>\n                            <div className=\"flex items-center gap-4\">\n                              <span className=\"text-3xl font-bold\" data-testid={`slider-product-price-${product.id}`}>\n                                ${product.price.toFixed(2)}\n                              </span>\n                              <Button \n                                className=\"bg-accent text-accent-foreground hover:bg-accent/90\"\n                                onClick={() => addToCart({ productId: product.id, quantity: 1 })}\n                                data-testid={`slider-add-to-cart-${product.id}`}\n                              >\n                                <ShoppingCart className=\"h-4 w-4 mr-2\" />\n                                Add to Cart\n                              </Button>\n                            </div>\n                          </div>\n                          <Link \n                            href={`/products/${product.id}`} \n                            className=\"text-primary-foreground/80 hover:text-primary-foreground font-medium\"\n                            data-testid={`slider-view-details-${product.id}`}\n                          >\n                            View Details â†’\n                          </Link>\n                        </div>\n                        \n                        <div className=\"relative\">\n                          {product.images?.[0] && (\n                            <img\n                              src={product.images[0]}\n                              alt={product.name}\n                              className=\"w-full h-64 md:h-80 object-cover rounded-lg shadow-lg\"\n                              loading=\"lazy\"\n                              data-testid={`slider-product-image-${product.id}`}\n                            />\n                          )}\n                        </div>\n                      </div>\n                    </div>\n                  </CarouselItem>\n                ))}\n              </CarouselContent>\n              <CarouselPrevious className=\"hidden md:flex -left-12\" />\n              <CarouselNext className=\"hidden md:flex -right-12\" />\n            </Carousel>\n          ) : (\n            <div className=\"text-center py-8\">\n              <p className=\"text-muted-foreground\" data-testid=\"text-no-featured-products\">Loading featured products...</p>\n            </div>\n          )}\n        </div>\n      </section>\n\n      {/* Featured Categories */}\n      <section className=\"py-16 bg-secondary/30\">\n        <div className=\"container mx-auto px-4\">\n          <h2 className=\"text-3xl font-bold text-center mb-12\" data-testid=\"text-categories-title\">Shop by Category</h2>\n          <div className=\"grid grid-cols-2 md:grid-cols-4 gap-6\">\n            {[\n              { \n                name: 'Laptops', \n                count: '45+ models', \n                value: 'laptops', \n                image: 'https://images.unsplash.com/photo-1517336714731-489689fd1ca8?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=300'\n              },\n              { \n                name: 'Phones', \n                count: '30+ models', \n                value: 'phones',\n                image: 'https://images.unsplash.com/photo-1511707171634-5f897ff02aa9?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=300'\n              },\n              { \n                name: 'Headphones', \n                count: '25+ models', \n                value: 'headphones',\n                image: 'https://images.unsplash.com/photo-1583394838336-acd977736f90?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=300'\n              },\n              { \n                name: 'PCs', \n                count: '20+ builds', \n                value: 'pcs',\n                image: 'https://images.unsplash.com/photo-1587202372583-49330a15584d?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=300'\n              },\n            ].map((category) => (\n              <Link key={category.value} href={`/products?category=${category.value}`}>\n                <Card className=\"group text-center hover:shadow-lg transition-all duration-300 cursor-pointer overflow-hidden\" data-testid={`card-category-${category.value}`}>\n                  <CardContent className=\"p-0\">\n                    <div className=\"relative h-32 mb-4\">\n                      <img\n                        src={category.image}\n                        alt={category.name}\n                        className=\"w-full h-full object-cover group-hover:scale-105 transition-transform duration-300\"\n                        loading=\"lazy\"\n                      />\n                      <div className=\"absolute inset-0 bg-black/20 group-hover:bg-black/10 transition-colors duration-300\"></div>\n                    </div>\n                    <div className=\"px-4 pb-4\">\n                      <h3 className=\"font-semibold mb-2\" data-testid={`text-category-name-${category.value}`}>{category.name}</h3>\n                      <p className=\"text-sm text-muted-foreground\" data-testid={`text-category-count-${category.value}`}>{category.count}</p>\n                    </div>\n                  </CardContent>\n                </Card>\n              </Link>\n            ))}\n          </div>\n        </div>\n      </section>\n\n      {/* Featured Products */}\n      <section className=\"py-16\">\n        <div className=\"container mx-auto px-4\">\n          <div className=\"flex justify-between items-center mb-12\">\n            <h2 className=\"text-3xl font-bold\" data-testid=\"text-featured-products-title\">Featured Products</h2>\n            <Link href=\"/products\" className=\"text-primary hover:text-primary/80 font-medium\" data-testid=\"link-view-all-products\">\n              View All â†’\n            </Link>\n          </div>\n          \n          {productsData?.products && productsData.products.length > 0 ? (\n            <Carousel className=\"w-full\" opts={{ align: \"start\", dragFree: true }}>\n              <CarouselContent className=\"-ml-2 md:-ml-4\">\n                {productsData.products.map((product) => (\n                  <CarouselItem key={product.id} className=\"pl-2 md:pl-4 basis-full sm:basis-1/2 md:basis-1/3 lg:basis-1/4\" data-testid={`featured-product-${product.id}`}>\n                    <Card className=\"h-full hover:shadow-lg transition-shadow\">\n                      <CardContent className=\"p-4\">\n                        <Link href={`/products/${product.id}`} className=\"block\" data-testid={`link-product-${product.id}`}>\n                          {product.images?.[0] && (\n                            <img\n                              src={product.images[0]}\n                              alt={product.name}\n                              className=\"w-full h-48 object-cover rounded-md mb-4\"\n                              loading=\"lazy\"\n                              data-testid={`img-product-${product.id}`}\n                            />\n                          )}\n                          <h3 className=\"font-semibold text-lg mb-2 line-clamp-2\" data-testid={`text-product-name-${product.id}`}>\n                            {product.name}\n                          </h3>\n                          <p className=\"text-muted-foreground text-sm mb-3 line-clamp-2\" data-testid={`text-product-description-${product.id}`}>\n                            {product.description}\n                          </p>\n                          <div className=\"flex items-center justify-between\">\n                            <span className=\"text-2xl font-bold text-primary\" data-testid={`text-product-price-${product.id}`}>\n                              ${product.price.toFixed(2)}\n                            </span>\n                            <Button \n                              size=\"sm\" \n                              onClick={(e) => {\n                                e.preventDefault();\n                                e.stopPropagation();\n                                addToCart({ productId: product.id, quantity: 1 });\n                              }}\n                              data-testid={`button-add-cart-${product.id}`}\n                            >\n                              <ShoppingCart className=\"h-4 w-4 mr-1\" />\n                              Add\n                            </Button>\n                          </div>\n                        </Link>\n                      </CardContent>\n                    </Card>\n                  </CarouselItem>\n                ))}\n              </CarouselContent>\n              <CarouselPrevious className=\"hidden md:flex -left-12\" />\n              <CarouselNext className=\"hidden md:flex -right-12\" />\n            </Carousel>\n          ) : (\n            <div className=\"text-center py-8\">\n              <p className=\"text-muted-foreground\" data-testid=\"text-no-products\">No products available at the moment.</p>\n            </div>\n          )}\n        </div>\n      </section>\n\n      {/* Blog Preview */}\n      <section className=\"py-16 bg-muted/30\">\n        <div className=\"container mx-auto px-4\">\n          <div className=\"flex justify-between items-center mb-12\">\n            <h2 className=\"text-3xl font-bold\" data-testid=\"text-blog-title\">Latest from Our Blog</h2>\n            <Link href=\"/blog\" className=\"text-primary hover:text-primary/80 font-medium\" data-testid=\"link-view-all-blog\">\n              View All â†’\n            </Link>\n          </div>\n          \n          {blogData?.posts && blogData.posts.length > 0 ? (\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-8\">\n              {blogData.posts.map((post) => (\n                <BlogCard key={post.id} post={post} />\n              ))}\n            </div>\n          ) : (\n            <div className=\"text-center py-8\">\n              <p className=\"text-muted-foreground\" data-testid=\"text-no-blog-posts\">No blog posts available at the moment.</p>\n            </div>\n          )}\n        </div>\n      </section>\n\n      {/* Newsletter */}\n      <section className=\"py-16 bg-primary text-primary-foreground\">\n        <div className=\"container mx-auto px-4 text-center\">\n          <h2 className=\"text-3xl font-bold mb-4\" data-testid=\"text-newsletter-title\">Stay Updated</h2>\n          <p className=\"text-xl mb-8 text-primary-foreground/90\" data-testid=\"text-newsletter-description\">\n            Get the latest deals and product updates delivered to your inbox\n          </p>\n          <form onSubmit={handleNewsletterSubmit} className=\"max-w-md mx-auto flex gap-4\">\n            <Input\n              type=\"email\"\n              placeholder=\"Enter your email\"\n              className=\"flex-1 bg-primary-foreground text-foreground\"\n              data-testid=\"input-newsletter-email\"\n            />\n            <Button type=\"submit\" className=\"bg-accent text-accent-foreground hover:bg-accent/90\" data-testid=\"button-subscribe\">\n              Subscribe\n            </Button>\n          </form>\n        </div>\n      </section>\n    </div>\n  );\n}\n","size_bytes":15017},"client/src/pages/login.tsx":{"content":"import { useState } from \"react\";\nimport { useLocation, Link } from \"wouter\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { Eye, EyeOff, ShoppingCart } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { loginSchema, type LoginCredentials } from \"@shared/schema\";\n\nexport default function Login() {\n  const [showPassword, setShowPassword] = useState(false);\n  const [, navigate] = useLocation();\n  const { login, isLoginPending, isAuthenticated } = useAuth();\n\n  const {\n    register,\n    handleSubmit,\n    formState: { errors },\n  } = useForm<LoginCredentials>({\n    resolver: zodResolver(loginSchema),\n  });\n\n  // Redirect if already authenticated\n  if (isAuthenticated) {\n    navigate('/');\n    return null;\n  }\n\n  const onSubmit = (data: LoginCredentials) => {\n    login(data, {\n      onSuccess: () => {\n        navigate('/');\n      },\n    });\n  };\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center bg-secondary/30 px-4 py-8\">\n      <div className=\"w-full max-w-md\">\n        {/* Logo */}\n        <div className=\"text-center mb-8\">\n          <Link href=\"/\" className=\"inline-flex items-center space-x-2\">\n            <div className=\"w-10 h-10 bg-primary rounded-lg flex items-center justify-center\">\n              <ShoppingCart className=\"h-6 w-6 text-primary-foreground\" />\n            </div>\n            <span className=\"text-2xl font-bold\">TechTreasure</span>\n          </Link>\n        </div>\n\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"text-2xl text-center\" data-testid=\"text-login-title\">\n              Welcome Back\n            </CardTitle>\n            <p className=\"text-center text-muted-foreground\">\n              Sign in to your account to continue shopping\n            </p>\n          </CardHeader>\n          <CardContent>\n            <form onSubmit={handleSubmit(onSubmit)} className=\"space-y-4\">\n              <div>\n                <Label htmlFor=\"email\">Email Address</Label>\n                <Input\n                  id=\"email\"\n                  type=\"email\"\n                  {...register(\"email\")}\n                  placeholder=\"Enter your email\"\n                  data-testid=\"input-login-email\"\n                />\n                {errors.email && (\n                  <p className=\"text-sm text-destructive mt-1\" data-testid=\"error-email\">\n                    {errors.email.message}\n                  </p>\n                )}\n              </div>\n\n              <div>\n                <Label htmlFor=\"password\">Password</Label>\n                <div className=\"relative\">\n                  <Input\n                    id=\"password\"\n                    type={showPassword ? \"text\" : \"password\"}\n                    {...register(\"password\")}\n                    placeholder=\"Enter your password\"\n                    data-testid=\"input-login-password\"\n                  />\n                  <Button\n                    type=\"button\"\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    className=\"absolute right-0 top-0 h-full px-3 hover:bg-transparent\"\n                    onClick={() => setShowPassword(!showPassword)}\n                    data-testid=\"button-toggle-password\"\n                  >\n                    {showPassword ? (\n                      <EyeOff className=\"h-4 w-4\" />\n                    ) : (\n                      <Eye className=\"h-4 w-4\" />\n                    )}\n                  </Button>\n                </div>\n                {errors.password && (\n                  <p className=\"text-sm text-destructive mt-1\" data-testid=\"error-password\">\n                    {errors.password.message}\n                  </p>\n                )}\n              </div>\n\n              <Button\n                type=\"submit\"\n                className=\"w-full\"\n                disabled={isLoginPending}\n                data-testid=\"button-login\"\n              >\n                {isLoginPending ? 'Signing In...' : 'Sign In'}\n              </Button>\n            </form>\n\n            <div className=\"mt-6 text-center\">\n              <p className=\"text-muted-foreground\">\n                Don't have an account?{' '}\n                <Link href=\"/register\" className=\"text-primary hover:underline\" data-testid=\"link-register\">\n                  Create one here\n                </Link>\n              </p>\n            </div>\n\n            <div className=\"mt-4 text-center\">\n              <Link href=\"/\" className=\"text-sm text-muted-foreground hover:text-primary\" data-testid=\"link-continue-shopping\">\n                Continue shopping as guest\n              </Link>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n","size_bytes":4964},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/pages/product-detail.tsx":{"content":"import { useParams } from \"wouter\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { useState } from \"react\";\nimport { Heart, ShoppingCart, Minus, Plus, Star, Truck, Shield, RotateCcw } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { useCart } from \"@/hooks/use-cart\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport type { Product } from \"@shared/schema\";\nimport NotFound from \"./not-found\";\n\nexport default function ProductDetail() {\n  const { id } = useParams();\n  const [quantity, setQuantity] = useState(1);\n  const [selectedImageIndex, setSelectedImageIndex] = useState(0);\n  const { addToCart, isAddingToCart } = useCart();\n  const { isAuthenticated } = useAuth();\n\n  const { data: product, isLoading, error } = useQuery<Product>({\n    queryKey: ['/api/products', id],\n    queryFn: async () => {\n      const response = await fetch(`/api/products/${id}`);\n      if (!response.ok) {\n        if (response.status === 404) {\n          throw new Error('Product not found');\n        }\n        throw new Error('Failed to fetch product');\n      }\n      return response.json();\n    },\n  });\n\n  if (isLoading) {\n    return (\n      <div className=\"container mx-auto px-4 py-8\">\n        <div className=\"text-center py-12\">\n          <p className=\"text-muted-foreground\" data-testid=\"text-loading\">Loading product...</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (error || !product) {\n    return <NotFound />;\n  }\n\n  const handleAddToCart = () => {\n    addToCart({ productId: product.id, quantity });\n  };\n\n  const incrementQuantity = () => {\n    if (quantity < product.stock) {\n      setQuantity(quantity + 1);\n    }\n  };\n\n  const decrementQuantity = () => {\n    if (quantity > 1) {\n      setQuantity(quantity - 1);\n    }\n  };\n\n  return (\n    <div className=\"container mx-auto px-4 py-8\">\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8\">\n        {/* Product Images */}\n        <div>\n          {product.images && product.images.length > 0 ? (\n            <>\n              <div className=\"aspect-square mb-4\">\n                <img\n                  src={product.images[selectedImageIndex]}\n                  alt={product.name}\n                  className=\"w-full h-full object-cover rounded-lg\"\n                  data-testid=\"img-product-main\"\n                />\n              </div>\n              \n              {product.images.length > 1 && (\n                <div className=\"flex gap-2 overflow-x-auto\">\n                  {product.images.map((image, index) => (\n                    <button\n                      key={index}\n                      onClick={() => setSelectedImageIndex(index)}\n                      className={`flex-shrink-0 w-20 h-20 rounded-md overflow-hidden border-2 ${\n                        selectedImageIndex === index ? 'border-primary' : 'border-border'\n                      }`}\n                      data-testid={`button-image-${index}`}\n                    >\n                      <img\n                        src={image}\n                        alt={`${product.name} ${index + 1}`}\n                        className=\"w-full h-full object-cover\"\n                        loading=\"lazy\"\n                      />\n                    </button>\n                  ))}\n                </div>\n              )}\n            </>\n          ) : (\n            <div className=\"aspect-square bg-muted rounded-lg flex items-center justify-center\">\n              <p className=\"text-muted-foreground\">No image available</p>\n            </div>\n          )}\n        </div>\n\n        {/* Product Details */}\n        <div>\n          <div className=\"mb-4\">\n            <Badge variant=\"secondary\" className=\"mb-2\" data-testid=\"badge-category\">\n              {product.category}\n            </Badge>\n            <h1 className=\"text-3xl font-bold mb-2\" data-testid=\"text-product-name\">\n              {product.name}\n            </h1>\n            <div className=\"flex items-center gap-2 mb-4\">\n              <div className=\"flex\">\n                {[...Array(5)].map((_, i) => (\n                  <Star key={i} className=\"h-4 w-4 fill-yellow-400 text-yellow-400\" />\n                ))}\n              </div>\n              <span className=\"text-sm text-muted-foreground\" data-testid=\"text-rating\">(4.5) â€¢ 123 reviews</span>\n            </div>\n          </div>\n\n          <div className=\"mb-6\">\n            <p className=\"text-3xl font-bold mb-4\" data-testid=\"text-product-price\">\n              ${product.price.toFixed(2)}\n            </p>\n            <p className=\"text-muted-foreground mb-4\" data-testid=\"text-product-description\">\n              {product.description}\n            </p>\n          </div>\n\n          {/* Stock Status */}\n          <div className=\"mb-6\">\n            {product.stock > 0 ? (\n              <p className=\"text-green-600 font-medium\" data-testid=\"text-stock-available\">\n                In Stock ({product.stock} available)\n              </p>\n            ) : (\n              <p className=\"text-destructive font-medium\" data-testid=\"text-out-of-stock\">\n                Out of Stock\n              </p>\n            )}\n          </div>\n\n          {/* Quantity and Add to Cart */}\n          {product.stock > 0 && (\n            <div className=\"mb-6\">\n              <div className=\"flex items-center gap-4 mb-4\">\n                <div className=\"flex items-center border border-border rounded-md\">\n                  <Button\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    onClick={decrementQuantity}\n                    disabled={quantity <= 1}\n                    data-testid=\"button-decrease-quantity\"\n                  >\n                    <Minus className=\"h-4 w-4\" />\n                  </Button>\n                  <span className=\"px-4 py-2 min-w-16 text-center\" data-testid=\"text-quantity\">\n                    {quantity}\n                  </span>\n                  <Button\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    onClick={incrementQuantity}\n                    disabled={quantity >= product.stock}\n                    data-testid=\"button-increase-quantity\"\n                  >\n                    <Plus className=\"h-4 w-4\" />\n                  </Button>\n                </div>\n                <Button\n                  onClick={handleAddToCart}\n                  disabled={isAddingToCart}\n                  className=\"flex-1\"\n                  data-testid=\"button-add-to-cart\"\n                >\n                  <ShoppingCart className=\"h-4 w-4 mr-2\" />\n                  Add to Cart\n                </Button>\n                <Button variant=\"outline\" size=\"sm\" data-testid=\"button-wishlist\">\n                  <Heart className=\"h-4 w-4\" />\n                </Button>\n              </div>\n            </div>\n          )}\n\n          <Separator className=\"my-6\" />\n\n          {/* Product Features */}\n          <div className=\"space-y-4\">\n            <div className=\"flex items-center gap-3\">\n              <Truck className=\"h-5 w-5 text-muted-foreground\" />\n              <div>\n                <p className=\"font-medium\">Free Shipping</p>\n                <p className=\"text-sm text-muted-foreground\">On orders over $50</p>\n              </div>\n            </div>\n            <div className=\"flex items-center gap-3\">\n              <Shield className=\"h-5 w-5 text-muted-foreground\" />\n              <div>\n                <p className=\"font-medium\">1 Year Warranty</p>\n                <p className=\"text-sm text-muted-foreground\">Manufacturer warranty included</p>\n              </div>\n            </div>\n            <div className=\"flex items-center gap-3\">\n              <RotateCcw className=\"h-5 w-5 text-muted-foreground\" />\n              <div>\n                <p className=\"font-medium\">30-Day Returns</p>\n                <p className=\"text-sm text-muted-foreground\">Easy returns within 30 days</p>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Product Tags */}\n      {product.tags && product.tags.length > 0 && (\n        <div className=\"mt-12\">\n          <h3 className=\"text-lg font-semibold mb-4\">Tags</h3>\n          <div className=\"flex flex-wrap gap-2\">\n            {product.tags.map((tag, index) => (\n              <Badge key={index} variant=\"outline\" data-testid={`badge-tag-${index}`}>\n                {tag}\n              </Badge>\n            ))}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n","size_bytes":8581},"client/src/pages/products.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { useLocation } from \"wouter\";\nimport { Search, Filter, ChevronDown, Grid, List, Heart, ShoppingCart, Eye } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { ProductGrid } from \"@/components/product/product-grid\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Slider } from \"@/components/ui/slider\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Link } from \"wouter\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useCart } from \"@/hooks/use-cart\";\nimport type { Product } from \"@shared/schema\";\n\nexport default function Products() {\n  const [location, navigate] = useLocation();\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [selectedCategory, setSelectedCategory] = useState<string>(\"\");\n  const [currentPage, setCurrentPage] = useState(1);\n  const [sortBy, setSortBy] = useState(\"name\");\n  const [itemsPerPage, setItemsPerPage] = useState(12);\n  const [viewMode, setViewMode] = useState<'grid' | 'list'>('grid');\n  const [priceRange, setPriceRange] = useState([0, 5000]);\n  const [selectedBrands, setSelectedBrands] = useState<string[]>([]);\n  const [wishlist, setWishlist] = useState<string[]>([]);\n  const { addToCart } = useCart();\n\n  // Parse URL parameters\n  useEffect(() => {\n    const urlParams = new URLSearchParams(window.location.search);\n    const category = urlParams.get('category') || '';\n    const search = urlParams.get('search') || '';\n    \n    setSelectedCategory(category);\n    setSearchQuery(search);\n  }, [location]);\n\n  const { data: productsData, isLoading } = useQuery<{ products: Product[]; total: number }>({\n    queryKey: ['/api/products', { \n      category: selectedCategory, \n      search: searchQuery, \n      page: currentPage, \n      limit: itemsPerPage,\n      sort: sortBy,\n      minPrice: priceRange[0],\n      maxPrice: priceRange[1],\n      brands: selectedBrands\n    }],\n    queryFn: async () => {\n      const params = new URLSearchParams({\n        page: currentPage.toString(),\n        limit: itemsPerPage.toString(),\n      });\n      \n      if (sortBy !== 'name') params.append('sort', sortBy);\n      if (priceRange[0] > 0) params.append('minPrice', priceRange[0].toString());\n      if (priceRange[1] < 5000) params.append('maxPrice', priceRange[1].toString());\n      \n      if (selectedCategory) params.append('category', selectedCategory);\n      if (searchQuery) params.append('search', searchQuery);\n      if (selectedBrands.length > 0) params.append('brands', selectedBrands.join(','));\n      \n      const response = await fetch(`/api/products?${params}`);\n      if (!response.ok) {\n        throw new Error('Failed to fetch products');\n      }\n      return response.json();\n    },\n  });\n\n  const handleSearch = (e: React.FormEvent) => {\n    e.preventDefault();\n    const params = new URLSearchParams();\n    if (searchQuery) params.append('search', searchQuery);\n    if (selectedCategory) params.append('category', selectedCategory);\n    \n    navigate(`/products?${params.toString()}`);\n    setCurrentPage(1);\n  };\n\n  const handleCategoryChange = (category: string) => {\n    const actualCategory = category === 'all' ? '' : category;\n    setSelectedCategory(actualCategory);\n    const params = new URLSearchParams();\n    if (actualCategory) params.append('category', actualCategory);\n    if (searchQuery) params.append('search', searchQuery);\n    \n    navigate(`/products?${params.toString()}`);\n    setCurrentPage(1);\n  };\n\n  const clearFilters = () => {\n    setSelectedCategory(\"\");\n    setSearchQuery(\"\");\n    navigate('/products');\n    setCurrentPage(1);\n  };\n\n  const categories = [\n    { label: \"Laptops\", value: \"laptops\" },\n    { label: \"Phones\", value: \"phones\" },\n    { label: \"Headphones\", value: \"headphones\" },\n    { label: \"PCs\", value: \"pcs\" },\n  ];\n\n  const totalPages = Math.ceil((productsData?.total || 0) / itemsPerPage);\n\n  const toggleWishlist = (productId: string) => {\n    setWishlist(prev => \n      prev.includes(productId) \n        ? prev.filter(id => id !== productId)\n        : [...prev, productId]\n    );\n  };\n\n  const brands = ['Apple', 'Samsung', 'Sony', 'Dell', 'HP', 'Lenovo', 'Microsoft'];\n\n  const toggleBrand = (brand: string) => {\n    setSelectedBrands(prev => \n      prev.includes(brand)\n        ? prev.filter(b => b !== brand)\n        : [...prev, brand]\n    );\n  };\n\n  const resetFilters = () => {\n    setSelectedCategory('');\n    setSearchQuery('');\n    setPriceRange([0, 5000]);\n    setSelectedBrands([]);\n    navigate('/products');\n    setCurrentPage(1);\n  };\n\n  return (\n    <div className=\"container mx-auto px-4 py-8\">\n      <div className=\"flex gap-8\">\n        {/* Filters Sidebar */}\n        <div className=\"w-64 space-y-6\">\n          <div>\n            <h2 className=\"text-xl font-semibold mb-4\">Filters</h2>\n            \n            {/* Search */}\n            <div className=\"space-y-4\">\n              <div>\n                <label className=\"text-sm font-medium mb-2 block\">Search</label>\n                <form onSubmit={handleSearch}>\n                  <div className=\"relative\">\n                    <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground h-4 w-4\" />\n                    <Input\n                      type=\"text\"\n                      placeholder=\"Search products...\"\n                      value={searchQuery}\n                      onChange={(e) => setSearchQuery(e.target.value)}\n                      className=\"pl-10\"\n                      data-testid=\"input-search-products\"\n                    />\n                  </div>\n                </form>\n              </div>\n              \n              <Separator />\n              \n              {/* Categories */}\n              <div>\n                <label className=\"text-sm font-medium mb-2 block\">Category</label>\n                <Select value={selectedCategory || 'all'} onValueChange={handleCategoryChange}>\n                  <SelectTrigger data-testid=\"select-category\">\n                    <SelectValue placeholder=\"All Categories\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"all\">All Categories</SelectItem>\n                    {categories.map((category) => (\n                      <SelectItem key={category.value} value={category.value}>\n                        {category.label}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n              \n              <Separator />\n              \n              {/* Price Range */}\n              <div>\n                <label className=\"text-sm font-medium mb-2 block\">Price Range</label>\n                <div className=\"px-2\">\n                  <Slider\n                    value={priceRange}\n                    onValueChange={setPriceRange}\n                    max={5000}\n                    min={0}\n                    step={50}\n                    className=\"mb-2\"\n                  />\n                  <div className=\"flex justify-between text-xs text-muted-foreground\">\n                    <span>${priceRange[0]}</span>\n                    <span>${priceRange[1]}</span>\n                  </div>\n                </div>\n              </div>\n              \n              <Separator />\n              \n              {/* Brands */}\n              <div>\n                <label className=\"text-sm font-medium mb-2 block\">Brands</label>\n                <div className=\"space-y-2\">\n                  {brands.map((brand) => (\n                    <div key={brand} className=\"flex items-center space-x-2\">\n                      <Checkbox\n                        id={brand}\n                        checked={selectedBrands.includes(brand)}\n                        onCheckedChange={() => toggleBrand(brand)}\n                      />\n                      <label htmlFor={brand} className=\"text-sm\">{brand}</label>\n                    </div>\n                  ))}\n                </div>\n              </div>\n              \n              <Separator />\n              \n              {/* Reset Filters */}\n              <Button \n                variant=\"outline\" \n                onClick={resetFilters} \n                className=\"w-full\"\n                data-testid=\"button-reset-filters\"\n              >\n                Reset All Filters\n              </Button>\n            </div>\n          </div>\n        </div>\n        \n        {/* Main Content */}\n        <div className=\"flex-1\">\n          {/* Header */}\n          <div className=\"mb-6\">\n            <h1 className=\"text-3xl font-bold mb-4\" data-testid=\"text-products-title\">Products</h1>\n            \n            {/* Top Controls */}\n            <div className=\"flex flex-col md:flex-row justify-between items-start md:items-center gap-4 mb-6\">\n              <div className=\"flex items-center gap-4\">\n                {/* Sort */}\n                <DropdownMenu>\n                  <DropdownMenuTrigger asChild>\n                    <Button variant=\"outline\" data-testid=\"button-sort\">\n                      Sort: {sortBy === 'name' ? 'A-Z' : sortBy === 'price-low' ? 'Price Low' : 'Price High'}\n                      <ChevronDown className=\"ml-2 h-4 w-4\" />\n                    </Button>\n                  </DropdownMenuTrigger>\n                  <DropdownMenuContent>\n                    <DropdownMenuItem onClick={() => setSortBy(\"name\")} data-testid=\"sort-name\">\n                      Name A-Z\n                    </DropdownMenuItem>\n                    <DropdownMenuItem onClick={() => setSortBy(\"price-low\")} data-testid=\"sort-price-low\">\n                      Price: Low to High\n                    </DropdownMenuItem>\n                    <DropdownMenuItem onClick={() => setSortBy(\"price-high\")} data-testid=\"sort-price-high\">\n                      Price: High to Low\n                    </DropdownMenuItem>\n                  </DropdownMenuContent>\n                </DropdownMenu>\n                \n                {/* Items per page */}\n                <Select value={itemsPerPage.toString()} onValueChange={(value) => setItemsPerPage(Number(value))}>\n                  <SelectTrigger className=\"w-32\">\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"12\">12 per page</SelectItem>\n                    <SelectItem value=\"24\">24 per page</SelectItem>\n                    <SelectItem value=\"48\">48 per page</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n              \n              {/* View Toggle */}\n              <div className=\"flex items-center gap-2\">\n                <Button\n                  variant={viewMode === 'grid' ? 'default' : 'outline'}\n                  size=\"sm\"\n                  onClick={() => setViewMode('grid')}\n                  data-testid=\"button-grid-view\"\n                >\n                  <Grid className=\"h-4 w-4\" />\n                </Button>\n                <Button\n                  variant={viewMode === 'list' ? 'default' : 'outline'}\n                  size=\"sm\"\n                  onClick={() => setViewMode('list')}\n                  data-testid=\"button-list-view\"\n                >\n                  <List className=\"h-4 w-4\" />\n                </Button>\n              </div>\n            </div>\n            \n            {/* Active Filters */}\n            {(selectedCategory || searchQuery || priceRange[0] > 0 || priceRange[1] < 5000 || selectedBrands.length > 0) && (\n              <div className=\"flex items-center gap-2 mb-4 flex-wrap\">\n                <span className=\"text-sm text-muted-foreground\">Active filters:</span>\n                {selectedCategory && (\n                  <Badge variant=\"secondary\" data-testid={`badge-filter-category-${selectedCategory}`}>\n                    Category: {categories.find(c => c.value === selectedCategory)?.label}\n                  </Badge>\n                )}\n                {searchQuery && (\n                  <Badge variant=\"secondary\" data-testid=\"badge-filter-search\">\n                    Search: {searchQuery}\n                  </Badge>\n                )}\n                {(priceRange[0] > 0 || priceRange[1] < 5000) && (\n                  <Badge variant=\"secondary\">\n                    Price: ${priceRange[0]} - ${priceRange[1]}\n                  </Badge>\n                )}\n                {selectedBrands.map(brand => (\n                  <Badge key={brand} variant=\"secondary\">\n                    {brand}\n                  </Badge>\n                ))}\n                <Button variant=\"ghost\" size=\"sm\" onClick={clearFilters} data-testid=\"button-clear-filters\">\n                  Clear all\n                </Button>\n              </div>\n            )}\n          </div>\n\n          {/* Products Display */}\n          {isLoading ? (\n            <div className=\"text-center py-12\">\n              <p className=\"text-muted-foreground\" data-testid=\"text-loading\">Loading products...</p>\n            </div>\n          ) : productsData?.products && productsData.products.length > 0 ? (\n            <>\n              <div className=\"mb-6\">\n                <p className=\"text-muted-foreground\" data-testid=\"text-results-count\">\n                  Showing {productsData.products.length} of {productsData.total} products\n                </p>\n              </div>\n              \n              {/* Products Grid/List */}\n              {viewMode === 'grid' ? (\n                <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6 mb-8\">\n                  {productsData.products.map((product) => (\n                    <Card key={product.id} className=\"group hover:shadow-lg transition-shadow\">\n                      <CardContent className=\"p-4\">\n                        <div className=\"relative mb-4\">\n                          {product.images?.[0] && (\n                            <img\n                              src={product.images[0]}\n                              alt={product.name}\n                              className=\"w-full h-48 object-cover rounded-md\"\n                              loading=\"lazy\"\n                            />\n                          )}\n                          <Button\n                            size=\"sm\"\n                            variant={wishlist.includes(product.id) ? \"default\" : \"secondary\"}\n                            className=\"absolute top-2 right-2 opacity-0 group-hover:opacity-100 transition-opacity\"\n                            onClick={() => toggleWishlist(product.id)}\n                          >\n                            <Heart className={`h-4 w-4 ${wishlist.includes(product.id) ? 'fill-current' : ''}`} />\n                          </Button>\n                        </div>\n                        \n                        <h3 className=\"font-semibold text-lg mb-2 line-clamp-2\">\n                          {product.name}\n                        </h3>\n                        <p className=\"text-muted-foreground text-sm mb-3 line-clamp-2\">\n                          {product.description}\n                        </p>\n                        \n                        <div className=\"flex items-center justify-between mb-4\">\n                          <span className=\"text-2xl font-bold text-primary\">\n                            ${product.price.toFixed(2)}\n                          </span>\n                        </div>\n                        \n                        <div className=\"flex gap-2\">\n                          <Button \n                            size=\"sm\" \n                            className=\"flex-1\"\n                            onClick={() => addToCart({ productId: product.id, quantity: 1 })}\n                          >\n                            <ShoppingCart className=\"h-4 w-4 mr-1\" />\n                            Add to Cart\n                          </Button>\n                          <Button size=\"sm\" variant=\"outline\" asChild>\n                            <Link href={`/products/${product.id}`}>\n                              <Eye className=\"h-4 w-4\" />\n                            </Link>\n                          </Button>\n                        </div>\n                      </CardContent>\n                    </Card>\n                  ))}\n                </div>\n              ) : (\n                <div className=\"space-y-4 mb-8\">\n                  {productsData.products.map((product) => (\n                    <Card key={product.id} className=\"hover:shadow-lg transition-shadow\">\n                      <CardContent className=\"p-6\">\n                        <div className=\"flex gap-6\">\n                          <div className=\"w-32 h-32 flex-shrink-0\">\n                            {product.images?.[0] && (\n                              <img\n                                src={product.images[0]}\n                                alt={product.name}\n                                className=\"w-full h-full object-cover rounded-md\"\n                                loading=\"lazy\"\n                              />\n                            )}\n                          </div>\n                          \n                          <div className=\"flex-1\">\n                            <div className=\"flex justify-between items-start mb-2\">\n                              <h3 className=\"font-semibold text-xl\">{product.name}</h3>\n                              <Button\n                                size=\"sm\"\n                                variant={wishlist.includes(product.id) ? \"default\" : \"secondary\"}\n                                onClick={() => toggleWishlist(product.id)}\n                              >\n                                <Heart className={`h-4 w-4 ${wishlist.includes(product.id) ? 'fill-current' : ''}`} />\n                              </Button>\n                            </div>\n                            \n                            <p className=\"text-muted-foreground mb-4\">\n                              {product.description}\n                            </p>\n                            \n                            <div className=\"flex items-center justify-between\">\n                              <span className=\"text-2xl font-bold text-primary\">\n                                ${product.price.toFixed(2)}\n                              </span>\n                              \n                              <div className=\"flex gap-2\">\n                                <Button \n                                  onClick={() => addToCart({ productId: product.id, quantity: 1 })}\n                                >\n                                  <ShoppingCart className=\"h-4 w-4 mr-2\" />\n                                  Add to Cart\n                                </Button>\n                                <Button variant=\"outline\" asChild>\n                                  <Link href={`/products/${product.id}`}>\n                                    <Eye className=\"h-4 w-4 mr-2\" />\n                                    View Details\n                                  </Link>\n                                </Button>\n                              </div>\n                            </div>\n                          </div>\n                        </div>\n                      </CardContent>\n                    </Card>\n                  ))}\n                </div>\n              )}\n              \n              {/* Pagination */}\n              {totalPages > 1 && (\n                <div className=\"flex justify-center items-center space-x-2 mt-8\">\n                  <Button\n                    variant=\"outline\"\n                    disabled={currentPage === 1}\n                    onClick={() => setCurrentPage(currentPage - 1)}\n                    data-testid=\"button-prev-page\"\n                  >\n                    Previous\n                  </Button>\n                  \n                  {Array.from({ length: Math.min(totalPages, 5) }, (_, i) => {\n                    let page;\n                    if (totalPages <= 5) {\n                      page = i + 1;\n                    } else if (currentPage <= 3) {\n                      page = i + 1;\n                    } else if (currentPage >= totalPages - 2) {\n                      page = totalPages - 4 + i;\n                    } else {\n                      page = currentPage - 2 + i;\n                    }\n                    \n                    return (\n                      <Button\n                        key={page}\n                        variant={currentPage === page ? \"default\" : \"outline\"}\n                        onClick={() => setCurrentPage(page)}\n                        data-testid={`button-page-${page}`}\n                      >\n                        {page}\n                      </Button>\n                    );\n                  })}\n                  \n                  <Button\n                    variant=\"outline\"\n                    disabled={currentPage === totalPages}\n                    onClick={() => setCurrentPage(currentPage + 1)}\n                    data-testid=\"button-next-page\"\n                  >\n                    Next\n                  </Button>\n                </div>\n              )}\n            </>\n          ) : (\n            <div className=\"text-center py-12\">\n              <p className=\"text-muted-foreground mb-4\" data-testid=\"text-no-products\">\n                No products found matching your criteria.\n              </p>\n              <Button onClick={resetFilters} data-testid=\"button-clear-search\">\n                Clear filters\n              </Button>\n            </div>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":21999},"client/src/pages/profile.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { User, Package, MapPin, CreditCard, Settings } from \"lucide-react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { useLocation } from \"wouter\";\nimport type { Order } from \"@shared/schema\";\n\nexport default function Profile() {\n  const { user, isAuthenticated, logout } = useAuth();\n  const [, navigate] = useLocation();\n\n  const { data: orders = [], isLoading } = useQuery<Order[]>({\n    queryKey: ['/api/orders'],\n    enabled: isAuthenticated,\n  });\n\n  if (!isAuthenticated) {\n    navigate('/login');\n    return null;\n  }\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'delivered':\n        return 'bg-green-100 text-green-800';\n      case 'shipped':\n        return 'bg-blue-100 text-blue-800';\n      case 'confirmed':\n        return 'bg-yellow-100 text-yellow-800';\n      case 'pending':\n        return 'bg-gray-100 text-gray-800';\n      case 'cancelled':\n        return 'bg-red-100 text-red-800';\n      default:\n        return 'bg-gray-100 text-gray-800';\n    }\n  };\n\n  const formatDate = (date: string | Date) => {\n    return new Date(date).toLocaleDateString('en-US', {\n      year: 'numeric',\n      month: 'short',\n      day: 'numeric'\n    });\n  };\n\n  return (\n    <div className=\"container mx-auto px-4 py-8\">\n      <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8\">\n        {/* Profile Sidebar */}\n        <div>\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\" data-testid=\"text-profile-title\">\n                <User className=\"h-5 w-5\" />\n                Profile\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div>\n                <h3 className=\"font-semibold text-lg\" data-testid=\"text-user-name\">\n                  {user?.firstName} {user?.lastName}\n                </h3>\n                <p className=\"text-muted-foreground\" data-testid=\"text-user-email\">{user?.email}</p>\n              </div>\n\n              <Separator />\n\n              <div className=\"space-y-3\">\n                <div className=\"flex items-center gap-2\">\n                  <Package className=\"h-4 w-4 text-muted-foreground\" />\n                  <span className=\"text-sm\">Orders: {orders.length}</span>\n                </div>\n                \n                {user?.address && (\n                  <div className=\"flex items-start gap-2\">\n                    <MapPin className=\"h-4 w-4 text-muted-foreground mt-0.5\" />\n                    <div className=\"text-sm\">\n                      <p>{user.address.street}</p>\n                      <p>{user.address.city}, {user.address.state} {user.address.zipCode}</p>\n                      <p>{user.address.country}</p>\n                    </div>\n                  </div>\n                )}\n              </div>\n\n              <Separator />\n\n              <div className=\"space-y-2\">\n                <Button variant=\"outline\" className=\"w-full justify-start\" data-testid=\"button-edit-profile\">\n                  <Settings className=\"h-4 w-4 mr-2\" />\n                  Edit Profile\n                </Button>\n                <Button variant=\"outline\" className=\"w-full justify-start\" data-testid=\"button-logout\">\n                  <User className=\"h-4 w-4 mr-2\" />\n                  <span onClick={() => logout()}>Logout</span>\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Orders Section */}\n        <div className=\"lg:col-span-2\">\n          <Card>\n            <CardHeader>\n              <CardTitle data-testid=\"text-orders-title\">Order History</CardTitle>\n            </CardHeader>\n            <CardContent>\n              {isLoading ? (\n                <div className=\"text-center py-8\">\n                  <p className=\"text-muted-foreground\" data-testid=\"text-loading-orders\">Loading orders...</p>\n                </div>\n              ) : orders.length === 0 ? (\n                <div className=\"text-center py-8\">\n                  <Package className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" />\n                  <p className=\"text-muted-foreground mb-4\" data-testid=\"text-no-orders\">No orders found</p>\n                  <Button onClick={() => navigate('/products')} data-testid=\"button-start-shopping\">\n                    Start Shopping\n                  </Button>\n                </div>\n              ) : (\n                <div className=\"space-y-4\">\n                  {orders.map((order) => (\n                    <Card key={order.id} className=\"p-4\" data-testid={`order-${order.id}`}>\n                      <div className=\"flex items-center justify-between mb-4\">\n                        <div>\n                          <h3 className=\"font-semibold\" data-testid={`text-order-id-${order.id}`}>\n                            Order #{order.id.slice(0, 8)}\n                          </h3>\n                          <p className=\"text-sm text-muted-foreground\" data-testid={`text-order-date-${order.id}`}>\n                            Placed on {formatDate(order.createdAt)}\n                          </p>\n                        </div>\n                        <div className=\"text-right\">\n                          <Badge className={getStatusColor(order.status)} data-testid={`badge-order-status-${order.id}`}>\n                            {order.status.charAt(0).toUpperCase() + order.status.slice(1)}\n                          </Badge>\n                          <p className=\"font-semibold mt-1\" data-testid={`text-order-total-${order.id}`}>\n                            ${order.total.toFixed(2)}\n                          </p>\n                        </div>\n                      </div>\n\n                      <div className=\"space-y-2\">\n                        <h4 className=\"font-medium text-sm\">Items:</h4>\n                        {order.items.map((item, index) => (\n                          <div key={index} className=\"flex justify-between text-sm\" data-testid={`order-item-${order.id}-${index}`}>\n                            <span>Product ID: {item.productId.slice(0, 8)} (Qty: {item.quantity})</span>\n                            <span>${(item.price * item.quantity).toFixed(2)}</span>\n                          </div>\n                        ))}\n                      </div>\n\n                      <Separator className=\"my-3\" />\n\n                      <div className=\"text-sm\">\n                        <p className=\"font-medium mb-1\">Shipping Address:</p>\n                        <div className=\"text-muted-foreground\" data-testid={`text-shipping-address-${order.id}`}>\n                          <p>{order.shippingAddress.street}</p>\n                          <p>{order.shippingAddress.city}, {order.shippingAddress.state} {order.shippingAddress.zipCode}</p>\n                          <p>{order.shippingAddress.country}</p>\n                        </div>\n                      </div>\n                    </Card>\n                  ))}\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":7327},"client/src/pages/register.tsx":{"content":"import { useState } from \"react\";\nimport { useLocation, Link } from \"wouter\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { Eye, EyeOff, ShoppingCart } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { insertUserSchema, type InsertUser } from \"@shared/schema\";\nimport { z } from \"zod\";\n\nconst registerSchema = insertUserSchema.extend({\n  confirmPassword: z.string(),\n}).refine((data) => data.password === data.confirmPassword, {\n  message: \"Passwords don't match\",\n  path: [\"confirmPassword\"],\n});\n\ntype RegisterFormData = z.infer<typeof registerSchema>;\n\nexport default function Register() {\n  const [showPassword, setShowPassword] = useState(false);\n  const [showConfirmPassword, setShowConfirmPassword] = useState(false);\n  const [, navigate] = useLocation();\n  const { register: registerUser, isRegisterPending, isAuthenticated } = useAuth();\n\n  const {\n    register,\n    handleSubmit,\n    formState: { errors },\n  } = useForm<RegisterFormData>({\n    resolver: zodResolver(registerSchema),\n  });\n\n  // Redirect if already authenticated\n  if (isAuthenticated) {\n    navigate('/');\n    return null;\n  }\n\n  const onSubmit = (data: RegisterFormData) => {\n    const { confirmPassword, ...userData } = data;\n    registerUser(userData, {\n      onSuccess: () => {\n        navigate('/');\n      },\n    });\n  };\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center bg-secondary/30 px-4 py-8\">\n      <div className=\"w-full max-w-md\">\n        {/* Logo */}\n        <div className=\"text-center mb-8\">\n          <Link href=\"/\" className=\"inline-flex items-center space-x-2\">\n            <div className=\"w-10 h-10 bg-primary rounded-lg flex items-center justify-center\">\n              <ShoppingCart className=\"h-6 w-6 text-primary-foreground\" />\n            </div>\n            <span className=\"text-2xl font-bold\">TechTreasure</span>\n          </Link>\n        </div>\n\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"text-2xl text-center\" data-testid=\"text-register-title\">\n              Create Account\n            </CardTitle>\n            <p className=\"text-center text-muted-foreground\">\n              Join TechTreasure and explore the latest tech\n            </p>\n          </CardHeader>\n          <CardContent>\n            <form onSubmit={handleSubmit(onSubmit)} className=\"space-y-4\">\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div>\n                  <Label htmlFor=\"firstName\">First Name</Label>\n                  <Input\n                    id=\"firstName\"\n                    type=\"text\"\n                    {...register(\"firstName\")}\n                    placeholder=\"First name\"\n                    data-testid=\"input-first-name\"\n                  />\n                  {errors.firstName && (\n                    <p className=\"text-sm text-destructive mt-1\" data-testid=\"error-first-name\">\n                      {errors.firstName.message}\n                    </p>\n                  )}\n                </div>\n\n                <div>\n                  <Label htmlFor=\"lastName\">Last Name</Label>\n                  <Input\n                    id=\"lastName\"\n                    type=\"text\"\n                    {...register(\"lastName\")}\n                    placeholder=\"Last name\"\n                    data-testid=\"input-last-name\"\n                  />\n                  {errors.lastName && (\n                    <p className=\"text-sm text-destructive mt-1\" data-testid=\"error-last-name\">\n                      {errors.lastName.message}\n                    </p>\n                  )}\n                </div>\n              </div>\n\n              <div>\n                <Label htmlFor=\"email\">Email Address</Label>\n                <Input\n                  id=\"email\"\n                  type=\"email\"\n                  {...register(\"email\")}\n                  placeholder=\"Enter your email\"\n                  data-testid=\"input-register-email\"\n                />\n                {errors.email && (\n                  <p className=\"text-sm text-destructive mt-1\" data-testid=\"error-email\">\n                    {errors.email.message}\n                  </p>\n                )}\n              </div>\n\n              <div>\n                <Label htmlFor=\"password\">Password</Label>\n                <div className=\"relative\">\n                  <Input\n                    id=\"password\"\n                    type={showPassword ? \"text\" : \"password\"}\n                    {...register(\"password\")}\n                    placeholder=\"Create a password\"\n                    data-testid=\"input-register-password\"\n                  />\n                  <Button\n                    type=\"button\"\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    className=\"absolute right-0 top-0 h-full px-3 hover:bg-transparent\"\n                    onClick={() => setShowPassword(!showPassword)}\n                    data-testid=\"button-toggle-password\"\n                  >\n                    {showPassword ? (\n                      <EyeOff className=\"h-4 w-4\" />\n                    ) : (\n                      <Eye className=\"h-4 w-4\" />\n                    )}\n                  </Button>\n                </div>\n                {errors.password && (\n                  <p className=\"text-sm text-destructive mt-1\" data-testid=\"error-password\">\n                    {errors.password.message}\n                  </p>\n                )}\n              </div>\n\n              <div>\n                <Label htmlFor=\"confirmPassword\">Confirm Password</Label>\n                <div className=\"relative\">\n                  <Input\n                    id=\"confirmPassword\"\n                    type={showConfirmPassword ? \"text\" : \"password\"}\n                    {...register(\"confirmPassword\")}\n                    placeholder=\"Confirm your password\"\n                    data-testid=\"input-confirm-password\"\n                  />\n                  <Button\n                    type=\"button\"\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    className=\"absolute right-0 top-0 h-full px-3 hover:bg-transparent\"\n                    onClick={() => setShowConfirmPassword(!showConfirmPassword)}\n                    data-testid=\"button-toggle-confirm-password\"\n                  >\n                    {showConfirmPassword ? (\n                      <EyeOff className=\"h-4 w-4\" />\n                    ) : (\n                      <Eye className=\"h-4 w-4\" />\n                    )}\n                  </Button>\n                </div>\n                {errors.confirmPassword && (\n                  <p className=\"text-sm text-destructive mt-1\" data-testid=\"error-confirm-password\">\n                    {errors.confirmPassword.message}\n                  </p>\n                )}\n              </div>\n\n              <Button\n                type=\"submit\"\n                className=\"w-full\"\n                disabled={isRegisterPending}\n                data-testid=\"button-register\"\n              >\n                {isRegisterPending ? 'Creating Account...' : 'Create Account'}\n              </Button>\n            </form>\n\n            <div className=\"mt-6 text-center\">\n              <p className=\"text-muted-foreground\">\n                Already have an account?{' '}\n                <Link href=\"/login\" className=\"text-primary hover:underline\" data-testid=\"link-login\">\n                  Sign in here\n                </Link>\n              </p>\n            </div>\n\n            <div className=\"mt-4 text-center\">\n              <Link href=\"/\" className=\"text-sm text-muted-foreground hover:text-primary\" data-testid=\"link-continue-shopping\">\n                Continue shopping as guest\n              </Link>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n","size_bytes":8058},"client/src/components/blog/blog-card.tsx":{"content":"import { Link } from \"wouter\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport type { BlogPost } from \"@shared/schema\";\n\ninterface BlogCardProps {\n  post: BlogPost;\n}\n\nexport function BlogCard({ post }: BlogCardProps) {\n  const formattedDate = new Date(post.createdAt).toLocaleDateString('en-US', {\n    year: 'numeric',\n    month: 'short',\n    day: 'numeric'\n  });\n\n  return (\n    <Link href={`/blog/${post.id}`}>\n      <Card className=\"overflow-hidden hover:shadow-lg transition-shadow cursor-pointer\" data-testid={`card-blog-${post.id}`}>\n        {post.image && (\n          <img\n            src={post.image}\n            alt={post.title}\n            className=\"w-full h-48 object-cover\"\n            loading=\"lazy\"\n            data-testid={`img-blog-${post.id}`}\n          />\n        )}\n        <CardContent className=\"p-6\">\n          <div className=\"flex items-center space-x-2 mb-3\">\n            <Badge variant=\"secondary\" data-testid={`badge-blog-category-${post.id}`}>\n              {post.category}\n            </Badge>\n            <span className=\"text-xs text-muted-foreground\" data-testid={`text-blog-date-${post.id}`}>\n              {formattedDate}\n            </span>\n          </div>\n          <h3 className=\"text-xl font-semibold mb-3\" data-testid={`text-blog-title-${post.id}`}>\n            {post.title}\n          </h3>\n          <p className=\"text-muted-foreground mb-4\" data-testid={`text-blog-excerpt-${post.id}`}>\n            {post.excerpt}\n          </p>\n          <div className=\"flex items-center justify-between\">\n            <span className=\"text-sm text-muted-foreground\" data-testid={`text-blog-read-time-${post.id}`}>\n              {post.readTime} min read\n            </span>\n            <span className=\"text-primary hover:text-primary/80 font-medium\" data-testid={`link-read-more-${post.id}`}>\n              Read More â†’\n            </span>\n          </div>\n        </CardContent>\n      </Card>\n    </Link>\n  );\n}\n","size_bytes":2006},"client/src/components/cart/cart-slide.tsx":{"content":"import { X, Plus, Minus, Trash2 } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { useCart } from \"@/hooks/use-cart\";\nimport { useLocation } from \"wouter\";\nimport { Badge } from \"@/components/ui/badge\";\n\ninterface CartSlideProps {\n  isOpen: boolean;\n  onClose: () => void;\n}\n\nexport function CartSlide({ isOpen, onClose }: CartSlideProps) {\n  const { cartItems, totalPrice, updateQuantity, removeFromCart, isLoading } = useCart();\n  const [, navigate] = useLocation();\n\n  const handleCheckout = () => {\n    navigate('/checkout');\n    onClose();\n  };\n\n  const handleViewCart = () => {\n    navigate('/cart');\n    onClose();\n  };\n\n  const shipping = totalPrice > 0 ? 9.99 : 0;\n  const total = totalPrice + shipping;\n\n  if (!isOpen) return null;\n\n  return (\n    <>\n      {/* Overlay */}\n      <div\n        className=\"fixed inset-0 bg-black/20 z-40 backdrop-blur-sm\"\n        onClick={onClose}\n        data-testid=\"overlay-cart\"\n      />\n      \n      {/* Cart Slide */}\n      <div className=\"fixed top-0 right-0 w-full md:w-96 h-full bg-card border-l border-border shadow-xl z-50 overflow-y-auto\">\n        <div className=\"p-6\">\n          <div className=\"flex items-center justify-between mb-6\">\n            <h2 className=\"text-xl font-semibold\" data-testid=\"text-cart-title\">Shopping Cart</h2>\n            <Button variant=\"ghost\" size=\"sm\" onClick={onClose} data-testid=\"button-close-cart\">\n              <X className=\"h-5 w-5\" />\n            </Button>\n          </div>\n\n          {isLoading ? (\n            <div className=\"text-center py-8\" data-testid=\"text-loading\">Loading...</div>\n          ) : cartItems.length === 0 ? (\n            <div className=\"text-center py-8\">\n              <p className=\"text-muted-foreground mb-4\" data-testid=\"text-empty-cart\">Your cart is empty</p>\n              <Button onClick={onClose} data-testid=\"button-continue-shopping\">\n                Continue Shopping\n              </Button>\n            </div>\n          ) : (\n            <>\n              {/* Cart Items */}\n              <div className=\"space-y-4 mb-6\">\n                {cartItems.map((item) => (\n                  <div key={item.productId} className=\"flex items-center space-x-4 p-4 border border-border rounded-lg\" data-testid={`cart-item-${item.productId}`}>\n                    {item.product?.images?.[0] && (\n                      <img\n                        src={item.product.images[0]}\n                        alt={item.product.name}\n                        className=\"w-16 h-16 object-cover rounded-md\"\n                        loading=\"lazy\"\n                        data-testid={`img-product-${item.productId}`}\n                      />\n                    )}\n                    <div className=\"flex-1\">\n                      <h3 className=\"font-medium\" data-testid={`text-product-name-${item.productId}`}>\n                        {item.product?.name || 'Unknown Product'}\n                      </h3>\n                      <p className=\"text-sm text-muted-foreground\" data-testid={`text-product-price-${item.productId}`}>\n                        ${item.product?.price?.toFixed(2) || '0.00'}\n                      </p>\n                      \n                      {/* Quantity Controls */}\n                      <div className=\"flex items-center space-x-2 mt-2\">\n                        <Button\n                          variant=\"outline\"\n                          size=\"sm\"\n                          className=\"h-6 w-6 p-0\"\n                          onClick={() => updateQuantity({ productId: item.productId, quantity: Math.max(0, item.quantity - 1) })}\n                          data-testid={`button-decrease-${item.productId}`}\n                        >\n                          <Minus className=\"h-3 w-3\" />\n                        </Button>\n                        <span className=\"text-sm min-w-8 text-center\" data-testid={`text-quantity-${item.productId}`}>\n                          {item.quantity}\n                        </span>\n                        <Button\n                          variant=\"outline\"\n                          size=\"sm\"\n                          className=\"h-6 w-6 p-0\"\n                          onClick={() => updateQuantity({ productId: item.productId, quantity: item.quantity + 1 })}\n                          data-testid={`button-increase-${item.productId}`}\n                        >\n                          <Plus className=\"h-3 w-3\" />\n                        </Button>\n                      </div>\n                    </div>\n                    <Button\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      className=\"text-destructive hover:text-destructive\"\n                      onClick={() => removeFromCart(item.productId)}\n                      data-testid={`button-remove-${item.productId}`}\n                    >\n                      <Trash2 className=\"h-4 w-4\" />\n                    </Button>\n                  </div>\n                ))}\n              </div>\n\n              {/* Cart Summary */}\n              <div className=\"border-t border-border pt-4 space-y-2\">\n                <div className=\"flex justify-between\" data-testid=\"row-subtotal\">\n                  <span>Subtotal</span>\n                  <span>${totalPrice.toFixed(2)}</span>\n                </div>\n                <div className=\"flex justify-between\" data-testid=\"row-shipping\">\n                  <span>Shipping</span>\n                  <span>${shipping.toFixed(2)}</span>\n                </div>\n                <div className=\"flex justify-between font-semibold text-lg border-t border-border pt-2\" data-testid=\"row-total\">\n                  <span>Total</span>\n                  <span>${total.toFixed(2)}</span>\n                </div>\n              </div>\n\n              {/* Cart Actions */}\n              <div className=\"space-y-3 mt-6\">\n                <Button\n                  className=\"w-full\"\n                  onClick={handleCheckout}\n                  data-testid=\"button-checkout\"\n                >\n                  Proceed to Checkout\n                </Button>\n                <Button\n                  variant=\"outline\"\n                  className=\"w-full\"\n                  onClick={handleViewCart}\n                  data-testid=\"button-view-cart\"\n                >\n                  View Full Cart\n                </Button>\n              </div>\n            </>\n          )}\n        </div>\n      </div>\n    </>\n  );\n}\n","size_bytes":6421},"client/src/components/layout/footer.tsx":{"content":"import { Link } from \"wouter\";\nimport { ShoppingCart } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\n\nexport function Footer() {\n  const handleNewsletterSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    // TODO: Implement newsletter subscription\n  };\n\n  return (\n    <footer className=\"bg-card border-t border-border\">\n      <div className=\"container mx-auto px-4 py-12\">\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-8\">\n          {/* Company Info */}\n          <div>\n            <div className=\"flex items-center space-x-2 mb-4\">\n              <div className=\"w-8 h-8 bg-primary rounded-lg flex items-center justify-center\">\n                <ShoppingCart className=\"h-4 w-4 text-primary-foreground\" />\n              </div>\n              <span className=\"font-bold text-xl\">TechTreasure</span>\n            </div>\n            <p className=\"text-muted-foreground mb-4\">\n              Your premier destination for the latest technology - laptops, phones, headphones, and custom PCs.\n            </p>\n            <div className=\"flex space-x-4\">\n              <Button variant=\"ghost\" size=\"sm\" asChild data-testid=\"link-facebook\">\n                <a href=\"#\" className=\"text-muted-foreground hover:text-primary\">\n                  <i className=\"fab fa-facebook\"></i>\n                </a>\n              </Button>\n              <Button variant=\"ghost\" size=\"sm\" asChild data-testid=\"link-twitter\">\n                <a href=\"#\" className=\"text-muted-foreground hover:text-primary\">\n                  <i className=\"fab fa-twitter\"></i>\n                </a>\n              </Button>\n              <Button variant=\"ghost\" size=\"sm\" asChild data-testid=\"link-instagram\">\n                <a href=\"#\" className=\"text-muted-foreground hover:text-primary\">\n                  <i className=\"fab fa-instagram\"></i>\n                </a>\n              </Button>\n            </div>\n          </div>\n\n          {/* Quick Links */}\n          <div>\n            <h3 className=\"font-semibold mb-4\">Quick Links</h3>\n            <ul className=\"space-y-2\">\n              <li>\n                <Link href=\"/\" className=\"text-muted-foreground hover:text-primary transition-colors\" data-testid=\"link-footer-home\">\n                  Home\n                </Link>\n              </li>\n              <li>\n                <Link href=\"/products\" className=\"text-muted-foreground hover:text-primary transition-colors\" data-testid=\"link-footer-products\">\n                  Products\n                </Link>\n              </li>\n              <li>\n                <Link href=\"/blog\" className=\"text-muted-foreground hover:text-primary transition-colors\" data-testid=\"link-footer-blog\">\n                  Blog\n                </Link>\n              </li>\n            </ul>\n          </div>\n\n          {/* Customer Service */}\n          <div>\n            <h3 className=\"font-semibold mb-4\">Customer Service</h3>\n            <ul className=\"space-y-2\">\n              <li>\n                <a href=\"#\" className=\"text-muted-foreground hover:text-primary transition-colors\" data-testid=\"link-help\">\n                  Help Center\n                </a>\n              </li>\n              <li>\n                <a href=\"#\" className=\"text-muted-foreground hover:text-primary transition-colors\" data-testid=\"link-shipping\">\n                  Shipping Info\n                </a>\n              </li>\n              <li>\n                <a href=\"#\" className=\"text-muted-foreground hover:text-primary transition-colors\" data-testid=\"link-returns\">\n                  Returns\n                </a>\n              </li>\n            </ul>\n          </div>\n\n          {/* Contact Info */}\n          <div>\n            <h3 className=\"font-semibold mb-4\">Contact Info</h3>\n            <ul className=\"space-y-3\">\n              <li className=\"flex items-center space-x-2\">\n                <i className=\"fas fa-map-marker-alt text-muted-foreground\"></i>\n                <span className=\"text-muted-foreground\">123 Commerce St, City, State 12345</span>\n              </li>\n              <li className=\"flex items-center space-x-2\">\n                <i className=\"fas fa-phone text-muted-foreground\"></i>\n                <span className=\"text-muted-foreground\">(555) 123-4567</span>\n              </li>\n              <li className=\"flex items-center space-x-2\">\n                <i className=\"fas fa-envelope text-muted-foreground\"></i>\n                <span className=\"text-muted-foreground\">support@techtreasure.com</span>\n              </li>\n            </ul>\n          </div>\n        </div>\n\n        {/* Bottom Bar */}\n        <div className=\"border-t border-border pt-8 mt-8 flex flex-col md:flex-row justify-between items-center\">\n          <p className=\"text-muted-foreground\">Â© 2023 TechTreasure. All rights reserved.</p>\n          <div className=\"flex space-x-6 mt-4 md:mt-0\">\n            <a href=\"#\" className=\"text-muted-foreground hover:text-primary transition-colors\" data-testid=\"link-privacy\">\n              Privacy Policy\n            </a>\n            <a href=\"#\" className=\"text-muted-foreground hover:text-primary transition-colors\" data-testid=\"link-terms\">\n              Terms of Service\n            </a>\n          </div>\n        </div>\n      </div>\n    </footer>\n  );\n}\n","size_bytes":5306},"client/src/components/layout/header.tsx":{"content":"import { useState } from \"react\";\nimport { Link, useLocation } from \"wouter\";\nimport { Search, ShoppingCart, User, Menu, X, Heart } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { useCart } from \"@/hooks/use-cart\";\nimport { Badge } from \"@/components/ui/badge\";\n\ninterface HeaderProps {\n  onCartClick: () => void;\n  onWishlistClick?: () => void;\n}\n\nexport function Header({ onCartClick, onWishlistClick }: HeaderProps) {\n  const [isMobileMenuOpen, setIsMobileMenuOpen] = useState(false);\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [wishlistItems, setWishlistItems] = useState<string[]>([]);\n  const [location, navigate] = useLocation();\n  const { user, isAuthenticated, logout } = useAuth();\n  const { totalItems } = useCart();\n\n  const handleWishlistClick = () => {\n    if (onWishlistClick) {\n      onWishlistClick();\n    } else {\n      // Default behavior - navigate to wishlist page or show modal\n      navigate('/wishlist');\n    }\n  };\n\n  const handleSearch = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (searchQuery.trim()) {\n      navigate(`/products?search=${encodeURIComponent(searchQuery.trim())}`);\n      setSearchQuery(\"\");\n    }\n  };\n\n  const categories = [\n    { name: \"Laptops\", value: \"laptops\" },\n    { name: \"Phones\", value: \"phones\" },\n    { name: \"Headphones\", value: \"headphones\" },\n    { name: \"PCs\", value: \"pcs\" },\n  ];\n\n  return (\n    <header className=\"sticky top-0 z-50 w-full border-b border-border bg-background/95 backdrop-blur supports-[backdrop-filter]:bg-background/60\">\n      <div className=\"container mx-auto px-4\">\n        <div className=\"flex h-16 items-center justify-between\">\n          {/* Logo */}\n          <div className=\"flex items-center space-x-4\">\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              className=\"md:hidden\"\n              onClick={() => setIsMobileMenuOpen(!isMobileMenuOpen)}\n              data-testid=\"button-mobile-menu\"\n            >\n              {isMobileMenuOpen ? (\n                <X className=\"h-5 w-5\" />\n              ) : (\n                <Menu className=\"h-5 w-5\" />\n              )}\n            </Button>\n\n            <Link\n              href=\"/\"\n              className=\"flex items-center space-x-2\"\n              data-testid=\"link-home\"\n            >\n              <div className=\"w-8 h-8 bg-primary rounded-lg flex items-center justify-center\">\n                <ShoppingCart className=\"h-4 w-4 text-primary-foreground\" />\n              </div>\n              <span className=\"font-bold text-xl\">TechTreasure</span>\n            </Link>\n          </div>\n\n          {/* Desktop Navigation */}\n          <nav className=\"hidden md:flex items-center space-x-8 ml-12\">\n            <Link\n              href=\"/\"\n              className=\"text-foreground hover:text-primary transition-colors\"\n              data-testid=\"link-nav-home\"\n            >\n              Home\n            </Link>\n            <Link\n              href=\"/products\"\n              className=\"text-foreground hover:text-primary transition-colors\"\n              data-testid=\"link-nav-products\"\n            >\n              Products\n            </Link>\n            <Link\n              href=\"/blog\"\n              className=\"text-foreground hover:text-primary transition-colors\"\n              data-testid=\"link-nav-blog\"\n            >\n              Blog\n            </Link>\n          </nav>\n\n          {/* Search Bar */}\n          <div className=\"hidden md:flex flex-1 max-w-md mx-8\">\n            <form onSubmit={handleSearch} className=\"relative w-full\">\n              <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground h-4 w-4\" />\n              <Input\n                type=\"text\"\n                placeholder=\"Search products...\"\n                value={searchQuery}\n                onChange={(e) => setSearchQuery(e.target.value)}\n                className=\"pl-10\"\n                data-testid=\"input-search\"\n              />\n            </form>\n          </div>\n\n          {/* User Actions */}\n          <div className=\"flex items-center space-x-4\">\n            {/* Wishlist */}\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              className=\"relative\"\n              onClick={handleWishlistClick}\n              data-testid=\"button-wishlist\"\n            >\n              <Heart className=\"h-5 w-5\" />\n              {wishlistItems.length > 0 && (\n                <Badge\n                  className=\"absolute -top-2 -right-2 h-5 w-5 rounded-full p-0 text-xs flex items-center justify-center bg-red-500 text-white\"\n                  data-testid=\"badge-wishlist-count\"\n                >\n                  {wishlistItems.length}\n                </Badge>\n              )}\n            </Button>\n            \n            {/* Cart */}\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              className=\"relative\"\n              onClick={onCartClick}\n              data-testid=\"button-cart\"\n            >\n              <ShoppingCart className=\"h-5 w-5\" />\n              {totalItems > 0 && (\n                <Badge\n                  className=\"absolute -top-2 -right-2 h-5 w-5 rounded-full p-0 text-xs flex items-center justify-center bg-accent text-accent-foreground\"\n                  data-testid=\"badge-cart-count\"\n                >\n                  {totalItems}\n                </Badge>\n              )}\n            </Button>\n\n            {/* User Menu */}\n            <DropdownMenu>\n              <DropdownMenuTrigger asChild>\n                <Button\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  data-testid=\"button-user-menu\"\n                >\n                  <User className=\"h-5 w-5\" />\n                </Button>\n              </DropdownMenuTrigger>\n              <DropdownMenuContent align=\"end\">\n                {isAuthenticated ? (\n                  <>\n                    <DropdownMenuItem asChild>\n                      <Link href=\"/profile\" data-testid=\"link-profile\">\n                        Profile\n                      </Link>\n                    </DropdownMenuItem>\n                    <DropdownMenuItem asChild>\n                      <Link href=\"/orders\" data-testid=\"link-orders\">\n                        Orders\n                      </Link>\n                    </DropdownMenuItem>\n                    <DropdownMenuItem\n                      onClick={() => logout()}\n                      data-testid=\"button-logout\"\n                    >\n                      Logout\n                    </DropdownMenuItem>\n                  </>\n                ) : (\n                  <>\n                    <DropdownMenuItem asChild>\n                      <Link href=\"/login\" data-testid=\"link-login\">\n                        Login\n                      </Link>\n                    </DropdownMenuItem>\n                    <DropdownMenuItem asChild>\n                      <Link href=\"/register\" data-testid=\"link-register\">\n                        Register\n                      </Link>\n                    </DropdownMenuItem>\n                  </>\n                )}\n              </DropdownMenuContent>\n            </DropdownMenu>\n          </div>\n        </div>\n\n        {/* Mobile Menu */}\n        {isMobileMenuOpen && (\n          <div className=\"md:hidden border-t border-border bg-background py-4\">\n            <nav className=\"flex flex-col space-y-4\">\n              <Link\n                href=\"/\"\n                className=\"text-foreground hover:text-primary transition-colors\"\n                data-testid=\"link-mobile-home\"\n              >\n                Home\n              </Link>\n              <Link\n                href=\"/products\"\n                className=\"text-foreground hover:text-primary transition-colors\"\n                data-testid=\"link-mobile-products\"\n              >\n                Products\n              </Link>\n\n              <Link\n                href=\"/blog\"\n                className=\"text-foreground hover:text-primary transition-colors\"\n                data-testid=\"link-mobile-blog\"\n              >\n                Blog\n              </Link>\n\n              {/* Mobile Search */}\n              <form onSubmit={handleSearch} className=\"relative\">\n                <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground h-4 w-4\" />\n                <Input\n                  type=\"text\"\n                  placeholder=\"Search products...\"\n                  value={searchQuery}\n                  onChange={(e) => setSearchQuery(e.target.value)}\n                  className=\"pl-10\"\n                  data-testid=\"input-mobile-search\"\n                />\n              </form>\n            </nav>\n          </div>\n        )}\n      </div>\n    </header>\n  );\n}\n","size_bytes":9006},"client/src/components/layout/layout.tsx":{"content":"import { Header } from \"./header\";\nimport { Footer } from \"./footer\";\nimport { CartSlide } from \"../cart/cart-slide\";\nimport { useState } from \"react\";\n\ninterface LayoutProps {\n  children: React.ReactNode;\n}\n\nexport function Layout({ children }: LayoutProps) {\n  const [isCartOpen, setIsCartOpen] = useState(false);\n\n  return (\n    <div className=\"min-h-screen bg-background text-foreground\">\n      <Header onCartClick={() => setIsCartOpen(true)} />\n      <main>{children}</main>\n      <Footer />\n      <CartSlide isOpen={isCartOpen} onClose={() => setIsCartOpen(false)} />\n    </div>\n  );\n}\n","size_bytes":592},"client/src/components/product/product-card.tsx":{"content":"import { Heart, ShoppingCart } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Link } from \"wouter\";\nimport { useCart } from \"@/hooks/use-cart\";\nimport { useState } from \"react\";\nimport type { Product } from \"@shared/schema\";\n\ninterface ProductCardProps {\n  product: Product;\n  variant?: 'standard' | 'large' | 'compact';\n}\n\nexport function ProductCard({ product, variant = 'standard' }: ProductCardProps) {\n  const { addToCart, isAddingToCart } = useCart();\n  const [isInWishlist, setIsInWishlist] = useState(false);\n\n  const handleAddToCart = (e: React.MouseEvent) => {\n    e.preventDefault(); // Prevent navigation when clicking add to cart\n    e.stopPropagation();\n    addToCart({ productId: product.id, quantity: 1 });\n  };\n\n  const handleWishlistToggle = (e: React.MouseEvent) => {\n    e.preventDefault();\n    e.stopPropagation();\n    setIsInWishlist(!isInWishlist);\n    // TODO: Add to actual wishlist storage/API\n  };\n\n  if (variant === 'large') {\n    return (\n      <Link href={`/products/${product.id}`}>\n        <Card className=\"md:col-span-2 lg:row-span-2 product-card-hover cursor-pointer overflow-hidden\" data-testid={`card-product-${product.id}`}>\n          {product.images?.[0] && (\n            <img\n              src={product.images[0]}\n              alt={product.name}\n              className=\"w-full h-64 lg:h-80 object-cover\"\n              loading=\"lazy\"\n              data-testid={`img-product-${product.id}`}\n            />\n          )}\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between mb-2\">\n              <Badge variant=\"secondary\" data-testid={`badge-category-${product.id}`}>\n                {product.category}\n              </Badge>\n              <Button \n                variant=\"ghost\" \n                size=\"sm\" \n                onClick={handleWishlistToggle}\n                className={isInWishlist ? \"text-red-500 hover:text-red-600\" : \"\"}\n                data-testid={`button-wishlist-${product.id}`}\n              >\n                <Heart className={`h-4 w-4 ${isInWishlist ? 'fill-current' : ''}`} />\n              </Button>\n            </div>\n            <h3 className=\"text-xl font-semibold mb-2\" data-testid={`text-product-name-${product.id}`}>\n              {product.name}\n            </h3>\n            <p className=\"text-muted-foreground mb-4\" data-testid={`text-product-description-${product.id}`}>\n              {product.description}\n            </p>\n            <div className=\"flex items-center justify-between\">\n              <span className=\"text-2xl font-bold\" data-testid={`text-product-price-${product.id}`}>\n                ${product.price.toFixed(2)}\n              </span>\n              <Button \n                onClick={handleAddToCart} \n                disabled={isAddingToCart}\n                data-testid={`button-add-to-cart-${product.id}`}\n              >\n                <ShoppingCart className=\"h-4 w-4 mr-2\" />\n                Add to Cart\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n      </Link>\n    );\n  }\n\n  if (variant === 'compact') {\n    return (\n      <Link href={`/products/${product.id}`}>\n        <Card className=\"md:col-span-2 product-card-hover cursor-pointer\" data-testid={`card-product-${product.id}`}>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center space-x-4\">\n              {product.images?.[0] && (\n                <img\n                  src={product.images[0]}\n                  alt={product.name}\n                  className=\"w-20 h-20 object-cover rounded-lg\"\n                  loading=\"lazy\"\n                  data-testid={`img-product-${product.id}`}\n                />\n              )}\n              <div className=\"flex-1\">\n                <div className=\"flex items-center space-x-2 mb-1\">\n                  <Badge variant=\"secondary\" data-testid={`badge-category-${product.id}`}>\n                    {product.category}\n                  </Badge>\n                  <Button \n                    variant=\"ghost\" \n                    size=\"sm\" \n                    onClick={handleWishlistToggle}\n                    className={isInWishlist ? \"text-red-500 hover:text-red-600\" : \"\"}\n                    data-testid={`button-wishlist-${product.id}`}\n                  >\n                    <Heart className={`h-3 w-3 ${isInWishlist ? 'fill-current' : ''}`} />\n                  </Button>\n                </div>\n                <h3 className=\"font-semibold mb-1\" data-testid={`text-product-name-${product.id}`}>\n                  {product.name}\n                </h3>\n                <p className=\"text-sm text-muted-foreground mb-2\" data-testid={`text-product-description-${product.id}`}>\n                  {product.description.length > 50 ? `${product.description.substring(0, 50)}...` : product.description}\n                </p>\n                <div className=\"flex items-center justify-between\">\n                  <span className=\"text-xl font-bold\" data-testid={`text-product-price-${product.id}`}>\n                    ${product.price.toFixed(2)}\n                  </span>\n                  <Button \n                    onClick={handleAddToCart}\n                    disabled={isAddingToCart}\n                    data-testid={`button-add-to-cart-${product.id}`}\n                  >\n                    Add to Cart\n                  </Button>\n                </div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </Link>\n    );\n  }\n\n  // Standard variant\n  return (\n    <Link href={`/products/${product.id}`}>\n      <Card className=\"product-card-hover cursor-pointer overflow-hidden\" data-testid={`card-product-${product.id}`}>\n        {product.images?.[0] && (\n          <img\n            src={product.images[0]}\n            alt={product.name}\n            className=\"w-full h-48 object-cover\"\n            loading=\"lazy\"\n            data-testid={`img-product-${product.id}`}\n          />\n        )}\n        <CardContent className=\"p-4\">\n          <div className=\"flex items-center justify-between mb-2\">\n            <Badge variant=\"secondary\" data-testid={`badge-category-${product.id}`}>\n              {product.category}\n            </Badge>\n            <Button \n              variant=\"ghost\" \n              size=\"sm\" \n              onClick={handleWishlistToggle}\n              className={isInWishlist ? \"text-red-500 hover:text-red-600\" : \"\"}\n              data-testid={`button-wishlist-${product.id}`}\n            >\n              <Heart className={`h-4 w-4 ${isInWishlist ? 'fill-current' : ''}`} />\n            </Button>\n          </div>\n          <h3 className=\"font-semibold mb-2\" data-testid={`text-product-name-${product.id}`}>\n            {product.name}\n          </h3>\n          <div className=\"flex items-center justify-between\">\n            <span className=\"text-lg font-bold\" data-testid={`text-product-price-${product.id}`}>\n              ${product.price.toFixed(2)}\n            </span>\n            <Button \n              size=\"sm\" \n              onClick={handleAddToCart}\n              disabled={isAddingToCart}\n              data-testid={`button-add-to-cart-${product.id}`}\n            >\n              <ShoppingCart className=\"h-4 w-4\" />\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n    </Link>\n  );\n}\n","size_bytes":7438},"client/src/components/product/product-grid.tsx":{"content":"import { ProductCard } from \"./product-card\";\nimport type { Product } from \"@shared/schema\";\n\ninterface ProductGridProps {\n  products: Product[];\n  variant?: 'mixed' | 'standard';\n}\n\nexport function ProductGrid({ products, variant = 'standard' }: ProductGridProps) {\n  if (variant === 'mixed' && products.length > 0) {\n    return (\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n        {products.map((product, index) => {\n          // Create mixed layout pattern\n          if (index === 0) {\n            return <ProductCard key={product.id} product={product} variant=\"large\" />;\n          } else if (index === 3 && products.length > 3) {\n            return <ProductCard key={product.id} product={product} variant=\"compact\" />;\n          } else {\n            return <ProductCard key={product.id} product={product} variant=\"standard\" />;\n          }\n        })}\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-6\">\n      {products.map((product) => (\n        <ProductCard key={product.id} product={product} variant=\"standard\" />\n      ))}\n    </div>\n  );\n}\n","size_bytes":1158},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    {Array.from({ length: props.value?.length || 1 }, (_, i) => (\n      <SliderPrimitive.Thumb \n        key={i}\n        className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" \n      />\n    ))}\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1185},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209}},"version":1}